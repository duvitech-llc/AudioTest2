
AudioTest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005738  08005738  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005740  08005740  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a300  20000070  080057b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000a370  080057b8  0002a370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012089  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e22  00000000  00000000  00032129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  00035d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025583  00000000  00000000  00036a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011141  00000000  00000000  0005bfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7bd5  00000000  00000000  0006d0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144cc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  00144d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005680 	.word	0x08005680

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08005680 	.word	0x08005680

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <fifo_init>:

#include "fifo_buff.h"


//This initializes the FIFO structure with the given buffer and size
void fifo_init(fifo_t * f, int * buf, int size){
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60f8      	str	r0, [r7, #12]
 80004ec:	60b9      	str	r1, [r7, #8]
 80004ee:	607a      	str	r2, [r7, #4]
     f->head = 0;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
     f->tail = 0;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	609a      	str	r2, [r3, #8]
     f->size = size;
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	60da      	str	r2, [r3, #12]
     f->buf = buf;
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	601a      	str	r2, [r3, #0]
}
 8000508:	bf00      	nop
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <fifo_read>:

//This reads nbytes bytes from the FIFO
//The number of bytes read is returned
int fifo_read(fifo_t * f, void * buf, int nbytes){
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
     int i;
     int * p;
     p = buf;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	613b      	str	r3, [r7, #16]
     for(i=0; i < nbytes; i++){
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	e024      	b.n	8000574 <fifo_read+0x60>
          if( f->tail != f->head ){ //see if any data is available
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	429a      	cmp	r2, r3
 8000534:	d019      	beq.n	800056a <fifo_read+0x56>
               *p++ = f->buf[f->tail];  //grab a byte from the buffer
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	441a      	add	r2, r3
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	1d19      	adds	r1, r3, #4
 8000546:	6139      	str	r1, [r7, #16]
 8000548:	6812      	ldr	r2, [r2, #0]
 800054a:	601a      	str	r2, [r3, #0]
               f->tail++;  //increment the tail
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	1c5a      	adds	r2, r3, #1
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	609a      	str	r2, [r3, #8]
               if( f->tail == f->size ){  //check for wrap-around
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	429a      	cmp	r2, r3
 8000560:	d105      	bne.n	800056e <fifo_read+0x5a>
                    f->tail = 0;
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	e001      	b.n	800056e <fifo_read+0x5a>
               }
          } else {
               return i; //number of bytes read
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	e007      	b.n	800057e <fifo_read+0x6a>
     for(i=0; i < nbytes; i++){
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbd6      	blt.n	800052a <fifo_read+0x16>
          }
     }
     return nbytes;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	371c      	adds	r7, #28
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <fifo_write>:

//This writes up to nbytes bytes to the FIFO
//If the head runs in to the tail, not all bytes are written
//The number of bytes written is returned
int fifo_write(fifo_t * f, const void * buf, int nbytes){
 800058a:	b480      	push	{r7}
 800058c:	b087      	sub	sp, #28
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
     int i;
     const int* p;
     p = buf;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	613b      	str	r3, [r7, #16]
     for(i=0; i < nbytes; i++){
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e02f      	b.n	8000600 <fifo_write+0x76>
           //first check to see if there is space in the buffer
           if( (f->head + 1 == f->tail) ||
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	1c5a      	adds	r2, r3, #1
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d00a      	beq.n	80005c4 <fifo_write+0x3a>
                ( (f->head + 1 == f->size) && (f->tail == 0) ))
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	685b      	ldr	r3, [r3, #4]
 80005b2:	1c5a      	adds	r2, r3, #1
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68db      	ldr	r3, [r3, #12]
           if( (f->head + 1 == f->tail) ||
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d105      	bne.n	80005c8 <fifo_write+0x3e>
                ( (f->head + 1 == f->size) && (f->tail == 0) ))
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d101      	bne.n	80005c8 <fifo_write+0x3e>
					 {
                 return i; //no more room
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	e020      	b.n	800060a <fifo_write+0x80>
           } else {
               f->buf[f->head] = *p++;
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	1d1a      	adds	r2, r3, #4
 80005cc:	613a      	str	r2, [r7, #16]
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	6811      	ldr	r1, [r2, #0]
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	6852      	ldr	r2, [r2, #4]
 80005d6:	0092      	lsls	r2, r2, #2
 80005d8:	440a      	add	r2, r1
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6013      	str	r3, [r2, #0]
               f->head++;  //increment the head
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	1c5a      	adds	r2, r3, #1
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	605a      	str	r2, [r3, #4]
               if( f->head == f->size ){  //check for wrap-around
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	685a      	ldr	r2, [r3, #4]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d102      	bne.n	80005fa <fifo_write+0x70>
                    f->head = 0;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
     for(i=0; i < nbytes; i++){
 80005fa:	697b      	ldr	r3, [r7, #20]
 80005fc:	3301      	adds	r3, #1
 80005fe:	617b      	str	r3, [r7, #20]
 8000600:	697a      	ldr	r2, [r7, #20]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbcb      	blt.n	80005a0 <fifo_write+0x16>
               }
           }
     }
     return nbytes;
 8000608:	687b      	ldr	r3, [r7, #4]
}
 800060a:	4618      	mov	r0, r3
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <_write>:
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


#ifdef __GNUC__
int _write(int fd, const void *buf, size_t count){
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	UNUSED(fd);
	uint8_t * src = (uint8_t *)buf;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	617b      	str	r3, [r7, #20]
	if(HAL_UART_Transmit_DMA(&huart3, src, count) != HAL_OK)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	b29b      	uxth	r3, r3
 800062c:	461a      	mov	r2, r3
 800062e:	6979      	ldr	r1, [r7, #20]
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <_write+0x34>)
 8000632:	f003 fd61 	bl	80040f8 <HAL_UART_Transmit_DMA>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <_write+0x28>
	{
	    Error_Handler();
 800063c:	f000 fbcc 	bl	8000dd8 <Error_Handler>
	}

	return count;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3718      	adds	r7, #24
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20009d50 	.word	0x20009d50

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 ff3c 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f848 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065c:	f000 f9ae 	bl	80009bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000660:	f000 f974 	bl	800094c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000664:	f000 f91a 	bl	800089c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000668:	f000 f942 	bl	80008f0 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 800066c:	f000 f8be 	bl	80007ec <MX_CRC_Init>
  MX_RNG_Init();
 8000670:	f000 f900 	bl	8000874 <MX_RNG_Init>
  MX_I2S3_Init();
 8000674:	f000 f8ce 	bl	8000814 <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */

  printf("DUVITECH Copyright 2021\r\n");
 8000678:	4814      	ldr	r0, [pc, #80]	; (80006cc <main+0x7c>)
 800067a:	f004 fba9 	bl	8004dd0 <puts>

  // initialize buffers
  dac_enable = false;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <main+0x80>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
  fifo_init(&audioFifo, audio_buffer, BUFF_SIZE);
 8000684:	f242 7210 	movw	r2, #10000	; 0x2710
 8000688:	4912      	ldr	r1, [pc, #72]	; (80006d4 <main+0x84>)
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <main+0x88>)
 800068c:	f7ff ff2a 	bl	80004e4 <fifo_init>

  // establish dma connection
  HAL_I2SEx_TransmitReceive_DMA(&hi2s3, tx_buf, rx_buf, 4);
 8000690:	2304      	movs	r3, #4
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <main+0x8c>)
 8000694:	4912      	ldr	r1, [pc, #72]	; (80006e0 <main+0x90>)
 8000696:	4813      	ldr	r0, [pc, #76]	; (80006e4 <main+0x94>)
 8000698:	f002 f874 	bl	8002784 <HAL_I2SEx_TransmitReceive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800069c:	2101      	movs	r1, #1
 800069e:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0x98>)
 80006a0:	f001 fe0f 	bl	80022c2 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80006a4:	20c8      	movs	r0, #200	; 0xc8
 80006a6:	f000 ff85 	bl	80015b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006aa:	2180      	movs	r1, #128	; 0x80
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <main+0x98>)
 80006ae:	f001 fe08 	bl	80022c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006b2:	2101      	movs	r1, #1
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <main+0x98>)
 80006b6:	f001 fe04 	bl	80022c2 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80006ba:	20c8      	movs	r0, #200	; 0xc8
 80006bc:	f000 ff7a 	bl	80015b4 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <main+0x98>)
 80006c4:	f001 fdfd 	bl	80022c2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006c8:	e7e8      	b.n	800069c <main+0x4c>
 80006ca:	bf00      	nop
 80006cc:	08005698 	.word	0x08005698
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	20000094 	.word	0x20000094
 80006d8:	20009ce0 	.word	0x20009ce0
 80006dc:	2000a284 	.word	0x2000a284
 80006e0:	2000a2a4 	.word	0x2000a2a4
 80006e4:	2000a314 	.word	0x2000a314
 80006e8:	40020400 	.word	0x40020400

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0a0      	sub	sp, #128	; 0x80
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 faf2 	bl	8004ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2230      	movs	r2, #48	; 0x30
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fae3 	bl	8004ce4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b30      	ldr	r3, [pc, #192]	; (80007e4 <SystemClock_Config+0xf8>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a2f      	ldr	r2, [pc, #188]	; (80007e4 <SystemClock_Config+0xf8>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <SystemClock_Config+0xf8>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b2a      	ldr	r3, [pc, #168]	; (80007e8 <SystemClock_Config+0xfc>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <SystemClock_Config+0xfc>)
 8000744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000748:	6013      	str	r3, [r2, #0]
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xfc>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000756:	2301      	movs	r3, #1
 8000758:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000768:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 800076e:	23a8      	movs	r3, #168	; 0xa8
 8000770:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000772:	2302      	movs	r3, #2
 8000774:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000776:	2307      	movs	r3, #7
 8000778:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800077e:	4618      	mov	r0, r3
 8000780:	f002 fdb2 	bl	80032e8 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800078a:	f000 fb25 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	230f      	movs	r3, #15
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000792:	2302      	movs	r3, #2
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800079e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007aa:	2105      	movs	r1, #5
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 f813 	bl	80037d8 <HAL_RCC_ClockConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007b8:	f000 fb0e 	bl	8000dd8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f9ff 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80007d8:	f000 fafe 	bl	8000dd8 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3780      	adds	r7, #128	; 0x80
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000

080007ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_CRC_Init+0x20>)
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <MX_CRC_Init+0x24>)
 80007f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_CRC_Init+0x20>)
 80007f8:	f001 f811 	bl	800181e <HAL_CRC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000802:	f000 fae9 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000a19c 	.word	0x2000a19c
 8000810:	40023000 	.word	0x40023000

08000814 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_I2S3_Init+0x54>)
 800081a:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_I2S3_Init+0x58>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2S3_Init+0x54>)
 8000820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000824:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_I2S3_Init+0x54>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2S3_Init+0x54>)
 800082e:	2203      	movs	r2, #3
 8000830:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_I2S3_Init+0x54>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_I2S3_Init+0x54>)
 800083c:	4a0c      	ldr	r2, [pc, #48]	; (8000870 <MX_I2S3_Init+0x5c>)
 800083e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2S3_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_I2S3_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2S3_Init+0x54>)
 800084e:	2201      	movs	r2, #1
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_I2S3_Init+0x54>)
 8000854:	f001 fd50 	bl	80022f8 <HAL_I2S_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800085e:	f000 fabb 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2000a314 	.word	0x2000a314
 800086c:	40003c00 	.word	0x40003c00
 8000870:	00017700 	.word	0x00017700

08000874 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_RNG_Init+0x20>)
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <MX_RNG_Init+0x24>)
 800087c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_RNG_Init+0x20>)
 8000880:	f003 fbc2 	bl	8004008 <HAL_RNG_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800088a:	f000 faa5 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000a294 	.word	0x2000a294
 8000898:	50060800 	.word	0x50060800

0800089c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_USART3_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_USART3_UART_Init+0x4c>)
 80008d4:	f003 fbc2 	bl	800405c <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 fa7b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20009d50 	.word	0x20009d50
 80008ec:	40004800 	.word	0x40004800

080008f0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	2204      	movs	r2, #4
 8000900:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000904:	2202      	movs	r2, #2
 8000906:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000910:	2202      	movs	r2, #2
 8000912:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000916:	2201      	movs	r2, #1
 8000918:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2201      	movs	r2, #1
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	f002 fbba 	bl	80030ac <HAL_PCD_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800093e:	f000 fa4b 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20009d94 	.word	0x20009d94

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_DMA_Init+0x6c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_DMA_Init+0x6c>)
 800095c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_DMA_Init+0x6c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200b      	movs	r0, #11
 8000974:	f000 ff1d 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000978:	200b      	movs	r0, #11
 800097a:	f000 ff36 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	200c      	movs	r0, #12
 8000984:	f000 ff15 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000988:	200c      	movs	r0, #12
 800098a:	f000 ff2e 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200e      	movs	r0, #14
 8000994:	f000 ff0d 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000998:	200e      	movs	r0, #14
 800099a:	f000 ff26 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2100      	movs	r1, #0
 80009a2:	2010      	movs	r0, #16
 80009a4:	f000 ff05 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009a8:	2010      	movs	r0, #16
 80009aa:	f000 ff1e 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800

080009bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
 80009d6:	4b84      	ldr	r3, [pc, #528]	; (8000be8 <MX_GPIO_Init+0x22c>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <MX_GPIO_Init+0x22c>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b81      	ldr	r3, [pc, #516]	; (8000be8 <MX_GPIO_Init+0x22c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	61bb      	str	r3, [r7, #24]
 80009ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	4b7d      	ldr	r3, [pc, #500]	; (8000be8 <MX_GPIO_Init+0x22c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a7c      	ldr	r2, [pc, #496]	; (8000be8 <MX_GPIO_Init+0x22c>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b7a      	ldr	r3, [pc, #488]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b76      	ldr	r3, [pc, #472]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a75      	ldr	r2, [pc, #468]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b73      	ldr	r3, [pc, #460]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b6f      	ldr	r3, [pc, #444]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a6e      	ldr	r2, [pc, #440]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b6c      	ldr	r3, [pc, #432]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b68      	ldr	r3, [pc, #416]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a67      	ldr	r2, [pc, #412]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b65      	ldr	r3, [pc, #404]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0308 	and.w	r3, r3, #8
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b61      	ldr	r3, [pc, #388]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a60      	ldr	r2, [pc, #384]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	; (8000be8 <MX_GPIO_Init+0x22c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|upper_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f244 1181 	movw	r1, #16769	; 0x4181
 8000a80:	485a      	ldr	r0, [pc, #360]	; (8000bec <MX_GPIO_Init+0x230>)
 8000a82:	f001 fc05 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2140      	movs	r1, #64	; 0x40
 8000a8a:	4859      	ldr	r0, [pc, #356]	; (8000bf0 <MX_GPIO_Init+0x234>)
 8000a8c:	f001 fc00 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(scope_GPIO_Port, scope_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	4857      	ldr	r0, [pc, #348]	; (8000bf4 <MX_GPIO_Init+0x238>)
 8000a98:	f001 fbfa 	bl	8002290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa2:	4b55      	ldr	r3, [pc, #340]	; (8000bf8 <MX_GPIO_Init+0x23c>)
 8000aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4850      	ldr	r0, [pc, #320]	; (8000bf4 <MX_GPIO_Init+0x238>)
 8000ab2:	f001 fa41 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ab6:	2332      	movs	r3, #50	; 0x32
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac6:	230b      	movs	r3, #11
 8000ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4848      	ldr	r0, [pc, #288]	; (8000bf4 <MX_GPIO_Init+0x238>)
 8000ad2:	f001 fa31 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ad6:	2386      	movs	r3, #134	; 0x86
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ae6:	230b      	movs	r3, #11
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4842      	ldr	r0, [pc, #264]	; (8000bfc <MX_GPIO_Init+0x240>)
 8000af2:	f001 fa21 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000af6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afc:	2301      	movs	r3, #1
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 031c 	add.w	r3, r7, #28
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4837      	ldr	r0, [pc, #220]	; (8000bec <MX_GPIO_Init+0x230>)
 8000b10:	f001 fa12 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b26:	230b      	movs	r3, #11
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482e      	ldr	r0, [pc, #184]	; (8000bec <MX_GPIO_Init+0x230>)
 8000b32:	f001 fa01 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b36:	2340      	movs	r3, #64	; 0x40
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4828      	ldr	r0, [pc, #160]	; (8000bf0 <MX_GPIO_Init+0x234>)
 8000b4e:	f001 f9f3 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b52:	2380      	movs	r3, #128	; 0x80
 8000b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_GPIO_Init+0x234>)
 8000b66:	f001 f9e7 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : blanker_Pin */
  GPIO_InitStruct.Pin = blanker_Pin;
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(blanker_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	481d      	ldr	r0, [pc, #116]	; (8000bf4 <MX_GPIO_Init+0x238>)
 8000b7e:	f001 f9db 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : scope_Pin */
  GPIO_InitStruct.Pin = scope_Pin;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(scope_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 031c 	add.w	r3, r7, #28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4816      	ldr	r0, [pc, #88]	; (8000bf4 <MX_GPIO_Init+0x238>)
 8000b9c:	f001 f9cc 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb2:	230b      	movs	r3, #11
 8000bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <MX_GPIO_Init+0x234>)
 8000bbe:	f001 f9bb 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : upper_Pin */
  GPIO_InitStruct.Pin = upper_Pin;
 8000bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(upper_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_GPIO_Init+0x230>)
 8000bdc:	f001 f9ac 	bl	8001f38 <HAL_GPIO_Init>

}
 8000be0:	bf00      	nop
 8000be2:	3730      	adds	r7, #48	; 0x30
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40020400 	.word	0x40020400
 8000bf0:	40021800 	.word	0x40021800
 8000bf4:	40020800 	.word	0x40020800
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	40020000 	.word	0x40020000

08000c00 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(scope_GPIO_Port, scope_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0e:	4831      	ldr	r0, [pc, #196]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xd4>)
 8000c10:	f001 fb3e 	bl	8002290 <HAL_GPIO_WritePin>

  // form L and R sample
  int left_in = (((int)rx_buf[0] << 16) | rx_buf[1]) >> 8; // shift right by 8 to right justify the 24 bit sample
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_I2SEx_TxRxHalfCpltCallback+0xd8>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	041b      	lsls	r3, r3, #16
 8000c1a:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <HAL_I2SEx_TxRxHalfCpltCallback+0xd8>)
 8000c1c:	8852      	ldrh	r2, [r2, #2]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	121b      	asrs	r3, r3, #8
 8000c22:	617b      	str	r3, [r7, #20]
  int right_in = (((int)rx_buf[2] << 16) | rx_buf[3]) >> 8;
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_I2SEx_TxRxHalfCpltCallback+0xd8>)
 8000c26:	889b      	ldrh	r3, [r3, #4]
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_I2SEx_TxRxHalfCpltCallback+0xd8>)
 8000c2c:	88d2      	ldrh	r2, [r2, #6]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	121b      	asrs	r3, r3, #8
 8000c32:	613b      	str	r3, [r7, #16]

  fifo_write(&audioFifo, &left_in, 1);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4827      	ldr	r0, [pc, #156]	; (8000cdc <HAL_I2SEx_TxRxHalfCpltCallback+0xdc>)
 8000c3e:	f7ff fca4 	bl	800058a <fifo_write>
  fifo_write(&audioFifo, &right_in, 1);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2201      	movs	r2, #1
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4824      	ldr	r0, [pc, #144]	; (8000cdc <HAL_I2SEx_TxRxHalfCpltCallback+0xdc>)
 8000c4c:	f7ff fc9d 	bl	800058a <fifo_write>

  // pass through
  if(dac_enable){
 8000c50:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <HAL_I2SEx_TxRxHalfCpltCallback+0xe0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d024      	beq.n	8000ca2 <HAL_I2SEx_TxRxHalfCpltCallback+0xa2>
	  int left_out = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
	  int right_out = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
	  fifo_read(&audioFifo, &left_out, 1);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	2201      	movs	r2, #1
 8000c66:	4619      	mov	r1, r3
 8000c68:	481c      	ldr	r0, [pc, #112]	; (8000cdc <HAL_I2SEx_TxRxHalfCpltCallback+0xdc>)
 8000c6a:	f7ff fc53 	bl	8000514 <fifo_read>
	  fifo_read(&audioFifo, &right_out, 1);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	2201      	movs	r2, #1
 8000c74:	4619      	mov	r1, r3
 8000c76:	4819      	ldr	r0, [pc, #100]	; (8000cdc <HAL_I2SEx_TxRxHalfCpltCallback+0xdc>)
 8000c78:	f7ff fc4c 	bl	8000514 <fifo_read>

	  // disassemble L and R samples into half words and store in tx_buf
	  tx_buf[0] = (left_out >> 8) & 0xFFFF;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	121b      	asrs	r3, r3, #8
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000c84:	801a      	strh	r2, [r3, #0]
	  tx_buf[1] = left_out & 0xFFFF;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000c8c:	805a      	strh	r2, [r3, #2]
	  tx_buf[2] = (right_out >> 8) & 0xFFFF;
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	121b      	asrs	r3, r3, #8
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000c96:	809a      	strh	r2, [r3, #4]
	  tx_buf[3] = right_out & 0xFFFF;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_I2SEx_TxRxHalfCpltCallback+0xe4>)
 8000c9e:	80da      	strh	r2, [r3, #6]
 8000ca0:	e008      	b.n	8000cb4 <HAL_I2SEx_TxRxHalfCpltCallback+0xb4>
  }else{
	if (sample_counter >= DAC_SEPERATION-1) {
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0xe8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d902      	bls.n	8000cb4 <HAL_I2SEx_TxRxHalfCpltCallback+0xb4>
	  dac_enable = true;
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_I2SEx_TxRxHalfCpltCallback+0xe0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
	}
  }
  sample_counter++;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0xe8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_I2SEx_TxRxHalfCpltCallback+0xe8>)
 8000cbc:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(scope_GPIO_Port, scope_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <HAL_I2SEx_TxRxHalfCpltCallback+0xd4>)
 8000cc6:	f001 fae3 	bl	8002290 <HAL_GPIO_WritePin>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40020800 	.word	0x40020800
 8000cd8:	2000a284 	.word	0x2000a284
 8000cdc:	20009ce0 	.word	0x20009ce0
 8000ce0:	2000008c 	.word	0x2000008c
 8000ce4:	2000a2a4 	.word	0x2000a2a4
 8000ce8:	20000090 	.word	0x20000090

08000cec <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(upper_GPIO_Port, upper_Pin, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	4831      	ldr	r0, [pc, #196]	; (8000dc0 <HAL_I2SEx_TxRxCpltCallback+0xd4>)
 8000cfc:	f001 fac8 	bl	8002290 <HAL_GPIO_WritePin>

  // form L and R sample
  int left_in = (((int)rx_buf[4] << 16) | rx_buf[5]) >> 8; // shift right by 8 to right justify the 24 bit sample
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <HAL_I2SEx_TxRxCpltCallback+0xd8>)
 8000d02:	891b      	ldrh	r3, [r3, #8]
 8000d04:	041b      	lsls	r3, r3, #16
 8000d06:	4a2f      	ldr	r2, [pc, #188]	; (8000dc4 <HAL_I2SEx_TxRxCpltCallback+0xd8>)
 8000d08:	8952      	ldrh	r2, [r2, #10]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	121b      	asrs	r3, r3, #8
 8000d0e:	617b      	str	r3, [r7, #20]
  int right_in = (((int)rx_buf[6] << 16) | rx_buf[7]) >> 8;
 8000d10:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_I2SEx_TxRxCpltCallback+0xd8>)
 8000d12:	899b      	ldrh	r3, [r3, #12]
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <HAL_I2SEx_TxRxCpltCallback+0xd8>)
 8000d18:	89d2      	ldrh	r2, [r2, #14]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	121b      	asrs	r3, r3, #8
 8000d1e:	613b      	str	r3, [r7, #16]

  fifo_write(&audioFifo, &left_in, 1);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	4827      	ldr	r0, [pc, #156]	; (8000dc8 <HAL_I2SEx_TxRxCpltCallback+0xdc>)
 8000d2a:	f7ff fc2e 	bl	800058a <fifo_write>
  fifo_write(&audioFifo, &right_in, 1);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	2201      	movs	r2, #1
 8000d34:	4619      	mov	r1, r3
 8000d36:	4824      	ldr	r0, [pc, #144]	; (8000dc8 <HAL_I2SEx_TxRxCpltCallback+0xdc>)
 8000d38:	f7ff fc27 	bl	800058a <fifo_write>

  // pass through
  if(dac_enable){
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_I2SEx_TxRxCpltCallback+0xe0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d024      	beq.n	8000d8e <HAL_I2SEx_TxRxCpltCallback+0xa2>
	  int left_out = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
	  int right_out = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
	  fifo_read(&audioFifo, &left_out, 1);
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2201      	movs	r2, #1
 8000d52:	4619      	mov	r1, r3
 8000d54:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <HAL_I2SEx_TxRxCpltCallback+0xdc>)
 8000d56:	f7ff fbdd 	bl	8000514 <fifo_read>
	  fifo_read(&audioFifo, &right_out, 1);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <HAL_I2SEx_TxRxCpltCallback+0xdc>)
 8000d64:	f7ff fbd6 	bl	8000514 <fifo_read>

	  // disassemble L and R samples into half words and store in tx_buf
	  tx_buf[4] = (left_out >> 8) & 0xFFFF;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	121b      	asrs	r3, r3, #8
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8000d70:	811a      	strh	r2, [r3, #8]
	  tx_buf[5] = left_out & 0xFFFF;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8000d78:	815a      	strh	r2, [r3, #10]
	  tx_buf[6] = (right_out >> 8) & 0xFFFF;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	121b      	asrs	r3, r3, #8
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8000d82:	819a      	strh	r2, [r3, #12]
	  tx_buf[7] = right_out & 0xFFFF;
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_I2SEx_TxRxCpltCallback+0xe4>)
 8000d8a:	81da      	strh	r2, [r3, #14]
 8000d8c:	e008      	b.n	8000da0 <HAL_I2SEx_TxRxCpltCallback+0xb4>
  }else{
	if (sample_counter >= DAC_SEPERATION-1) {
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_I2SEx_TxRxCpltCallback+0xe8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d902      	bls.n	8000da0 <HAL_I2SEx_TxRxCpltCallback+0xb4>
	  dac_enable = true;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_I2SEx_TxRxCpltCallback+0xe0>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	701a      	strb	r2, [r3, #0]
	}
  }
  sample_counter++;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_I2SEx_TxRxCpltCallback+0xe8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	3301      	adds	r3, #1
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_I2SEx_TxRxCpltCallback+0xe8>)
 8000da8:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(upper_GPIO_Port, upper_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <HAL_I2SEx_TxRxCpltCallback+0xd4>)
 8000db2:	f001 fa6d 	bl	8002290 <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	2000a284 	.word	0x2000a284
 8000dc8:	20009ce0 	.word	0x20009ce0
 8000dcc:	2000008c 	.word	0x2000008c
 8000dd0:	2000a2a4 	.word	0x2000a2a4
 8000dd4:	20000090 	.word	0x20000090

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <Error_Handler+0x14>)
 8000de2:	f001 fa6e 	bl	80022c2 <HAL_GPIO_TogglePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de6:	b672      	cpsid	i
}
 8000de8:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dea:	e7fe      	b.n	8000dea <Error_Handler+0x12>
 8000dec:	40020400 	.word	0x40020400

08000df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x4c>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800

08000e40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <HAL_CRC_MspInit+0x3c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a09      	ldr	r2, [pc, #36]	; (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <HAL_CRC_MspInit+0x40>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023000 	.word	0x40023000
 8000e80:	40023800 	.word	0x40023800

08000e84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a63      	ldr	r2, [pc, #396]	; (8001030 <HAL_I2S_MspInit+0x1ac>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f040 80bf 	bne.w	8001026 <HAL_I2S_MspInit+0x1a2>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	4b61      	ldr	r3, [pc, #388]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a60      	ldr	r2, [pc, #384]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b5e      	ldr	r3, [pc, #376]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a59      	ldr	r2, [pc, #356]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b57      	ldr	r3, [pc, #348]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	4b53      	ldr	r3, [pc, #332]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee8:	4a52      	ldr	r2, [pc, #328]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <HAL_I2S_MspInit+0x1b0>)
 8000ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef4:	f003 0304 	and.w	r3, r3, #4
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000efc:	2310      	movs	r3, #16
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4848      	ldr	r0, [pc, #288]	; (8001038 <HAL_I2S_MspInit+0x1b4>)
 8000f18:	f001 f80e 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000f1c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f2e:	2306      	movs	r3, #6
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4840      	ldr	r0, [pc, #256]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000f3a:	f000 fffd 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000f50:	2305      	movs	r3, #5
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4838      	ldr	r0, [pc, #224]	; (800103c <HAL_I2S_MspInit+0x1b8>)
 8000f5c:	f000 ffec 	bl	8001f38 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000f60:	4b37      	ldr	r3, [pc, #220]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f62:	4a38      	ldr	r2, [pc, #224]	; (8001044 <HAL_I2S_MspInit+0x1c0>)
 8000f64:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f68:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000f6c:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f88:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f8a:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f98:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000f9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fa0:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa2:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8000fa8:	4825      	ldr	r0, [pc, #148]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000faa:	f000 fc55 	bl	8001858 <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_I2S_MspInit+0x134>
    {
      Error_Handler();
 8000fb4:	f7ff ff10 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000fbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fbe:	4a20      	ldr	r2, [pc, #128]	; (8001040 <HAL_I2S_MspInit+0x1bc>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000fc4:	4b20      	ldr	r3, [pc, #128]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fc6:	4a21      	ldr	r2, [pc, #132]	; (800104c <HAL_I2S_MspInit+0x1c8>)
 8000fc8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fd2:	2240      	movs	r2, #64	; 0x40
 8000fd4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8000ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001002:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8001006:	2200      	movs	r2, #0
 8001008:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 800100c:	f000 fc24 	bl	8001858 <HAL_DMA_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_I2S_MspInit+0x196>
    {
      Error_Handler();
 8001016:	f7ff fedf 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_I2S_MspInit+0x1c4>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40003c00 	.word	0x40003c00
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020800 	.word	0x40020800
 8001040:	2000a2b4 	.word	0x2000a2b4
 8001044:	40026010 	.word	0x40026010
 8001048:	2000a214 	.word	0x2000a214
 800104c:	40026088 	.word	0x40026088

08001050 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0b      	ldr	r2, [pc, #44]	; (800108c <HAL_RNG_MspInit+0x3c>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d10d      	bne.n	800107e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <HAL_RNG_MspInit+0x40>)
 8001068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <HAL_RNG_MspInit+0x40>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001070:	6353      	str	r3, [r2, #52]	; 0x34
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <HAL_RNG_MspInit+0x40>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	50060800 	.word	0x50060800
 8001090:	40023800 	.word	0x40023800

08001094 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_UART_MspInit+0x140>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 8089 	bne.w	80011ca <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	4b46      	ldr	r3, [pc, #280]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	4a45      	ldr	r2, [pc, #276]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	6413      	str	r3, [r2, #64]	; 0x40
 80010c8:	4b43      	ldr	r3, [pc, #268]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	4b3f      	ldr	r3, [pc, #252]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a3e      	ldr	r2, [pc, #248]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_UART_MspInit+0x144>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80010f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001102:	2307      	movs	r3, #7
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	4833      	ldr	r0, [pc, #204]	; (80011dc <HAL_UART_MspInit+0x148>)
 800110e:	f000 ff13 	bl	8001f38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001114:	4a33      	ldr	r2, [pc, #204]	; (80011e4 <HAL_UART_MspInit+0x150>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001120:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001126:	4b2e      	ldr	r3, [pc, #184]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001128:	2200      	movs	r2, #0
 800112a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800112c:	4b2c      	ldr	r3, [pc, #176]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 800112e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001132:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800113a:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001140:	4b27      	ldr	r3, [pc, #156]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001146:	4b26      	ldr	r3, [pc, #152]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 800114e:	2200      	movs	r2, #0
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001152:	4823      	ldr	r0, [pc, #140]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001154:	f000 fb80 	bl	8001858 <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800115e:	f7ff fe3b 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1e      	ldr	r2, [pc, #120]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 8001166:	635a      	str	r2, [r3, #52]	; 0x34
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <HAL_UART_MspInit+0x14c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_UART_MspInit+0x154>)
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <HAL_UART_MspInit+0x158>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_UART_MspInit+0x154>)
 8001176:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800117a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0x154>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_UART_MspInit+0x154>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0x154>)
 800118a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800118e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x154>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0x154>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_UART_MspInit+0x154>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x154>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_UART_MspInit+0x154>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011ae:	480e      	ldr	r0, [pc, #56]	; (80011e8 <HAL_UART_MspInit+0x154>)
 80011b0:	f000 fb52 	bl	8001858 <HAL_DMA_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80011ba:	f7ff fe0d 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a09      	ldr	r2, [pc, #36]	; (80011e8 <HAL_UART_MspInit+0x154>)
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
 80011c4:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_UART_MspInit+0x154>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40004800 	.word	0x40004800
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	2000a1b4 	.word	0x2000a1b4
 80011e4:	40026058 	.word	0x40026058
 80011e8:	20009cf0 	.word	0x20009cf0
 80011ec:	40026028 	.word	0x40026028

080011f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001210:	d13f      	bne.n	8001292 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <HAL_PCD_MspInit+0xac>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a20      	ldr	r2, [pc, #128]	; (800129c <HAL_PCD_MspInit+0xac>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_PCD_MspInit+0xac>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800122e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001240:	230a      	movs	r3, #10
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4815      	ldr	r0, [pc, #84]	; (80012a0 <HAL_PCD_MspInit+0xb0>)
 800124c:	f000 fe74 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001250:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <HAL_PCD_MspInit+0xb0>)
 8001266:	f000 fe67 	bl	8001f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_PCD_MspInit+0xac>)
 800126c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126e:	4a0b      	ldr	r2, [pc, #44]	; (800129c <HAL_PCD_MspInit+0xac>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	6353      	str	r3, [r2, #52]	; 0x34
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_PCD_MspInit+0xac>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_PCD_MspInit+0xac>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001284:	6453      	str	r3, [r2, #68]	; 0x44
 8001286:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_PCD_MspInit+0xac>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40020000 	.word	0x40020000

080012a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <NMI_Handler+0x4>

080012aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <HardFault_Handler+0x4>

080012b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <MemManage_Handler+0x4>

080012b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <BusFault_Handler+0x4>

080012bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <UsageFault_Handler+0x4>

080012c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 f940 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <DMA1_Stream0_IRQHandler+0x10>)
 80012fe:	f000 fbb1 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000a2b4 	.word	0x2000a2b4

0800130c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001310:	4802      	ldr	r0, [pc, #8]	; (800131c <DMA1_Stream1_IRQHandler+0x10>)
 8001312:	f000 fba7 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20009cf0 	.word	0x20009cf0

08001320 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA1_Stream3_IRQHandler+0x10>)
 8001326:	f000 fb9d 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000a1b4 	.word	0x2000a1b4

08001334 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA1_Stream5_IRQHandler+0x10>)
 800133a:	f000 fb93 	bl	8001a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000a214 	.word	0x2000a214

08001348 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
	}

return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013aa:	605a      	str	r2, [r3, #4]
	return 0;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <_isatty>:

int _isatty(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f4:	4a14      	ldr	r2, [pc, #80]	; (8001448 <_sbrk+0x5c>)
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <_sbrk+0x60>)
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001408:	4b11      	ldr	r3, [pc, #68]	; (8001450 <_sbrk+0x64>)
 800140a:	4a12      	ldr	r2, [pc, #72]	; (8001454 <_sbrk+0x68>)
 800140c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <_sbrk+0x64>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	429a      	cmp	r2, r3
 800141a:	d207      	bcs.n	800142c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800141c:	f003 fc38 	bl	8004c90 <__errno>
 8001420:	4603      	mov	r3, r0
 8001422:	220c      	movs	r2, #12
 8001424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
 800142a:	e009      	b.n	8001440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <_sbrk+0x64>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <_sbrk+0x64>)
 800143c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20030000 	.word	0x20030000
 800144c:	00000400 	.word	0x00000400
 8001450:	20009cd4 	.word	0x20009cd4
 8001454:	2000a370 	.word	0x2000a370

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001482:	490e      	ldr	r1, [pc, #56]	; (80014bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001484:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001498:	4c0b      	ldr	r4, [pc, #44]	; (80014c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014a6:	f7ff ffd7 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f003 fbf7 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff f8cf 	bl	8000650 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014b4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014c0:	08005748 	.word	0x08005748
  ldr r2, =_sbss
 80014c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014c8:	2000a370 	.word	0x2000a370

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_Init+0x40>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_Init+0x40>)
 80014e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_Init+0x40>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 f94f 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f808 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fc74 	bl	8000df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f967 	bl	8001806 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f92f 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	; (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	20000008 	.word	0x20000008
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	2000a35c 	.word	0x2000a35c

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2000a35c 	.word	0x2000a35c

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e00e      	b.n	800184e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	795b      	ldrb	r3, [r3, #5]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d105      	bne.n	8001846 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff fafd 	bl	8000e40 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2201      	movs	r2, #1
 800184a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff fe9a 	bl	800159c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e099      	b.n	80019a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001894:	e00f      	b.n	80018b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001896:	f7ff fe81 	bl	800159c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d908      	bls.n	80018b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2220      	movs	r2, #32
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2203      	movs	r2, #3
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e078      	b.n	80019a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e8      	bne.n	8001896 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_DMA_Init+0x158>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4313      	orrs	r3, r2
 8001906:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2b04      	cmp	r3, #4
 800190e:	d107      	bne.n	8001920 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4313      	orrs	r3, r2
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	4313      	orrs	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f023 0307 	bic.w	r3, r3, #7
 8001936:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4313      	orrs	r3, r2
 8001940:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	2b04      	cmp	r3, #4
 8001948:	d117      	bne.n	800197a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00e      	beq.n	800197a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fa6f 	bl	8001e40 <DMA_CheckFifoParam>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2240      	movs	r2, #64	; 0x40
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001976:	2301      	movs	r3, #1
 8001978:	e016      	b.n	80019a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fa26 	bl	8001dd4 <DMA_CalcBaseAndBitshift>
 8001988:	4603      	mov	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	223f      	movs	r2, #63	; 0x3f
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	f010803f 	.word	0xf010803f

080019b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Start_IT+0x26>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e040      	b.n	8001a5c <HAL_DMA_Start_IT+0xa8>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d12f      	bne.n	8001a4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f9b8 	bl	8001d78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0c:	223f      	movs	r2, #63	; 0x3f
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0216 	orr.w	r2, r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d007      	beq.n	8001a3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f042 0208 	orr.w	r2, r2, #8
 8001a3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	e005      	b.n	8001a5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a56:	2302      	movs	r3, #2
 8001a58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_DMA_IRQHandler+0x258>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a92      	ldr	r2, [pc, #584]	; (8001cc0 <HAL_DMA_IRQHandler+0x25c>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2208      	movs	r2, #8
 8001a90:	409a      	lsls	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01a      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d013      	beq.n	8001ad0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0204 	bic.w	r2, r2, #4
 8001ab6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	2208      	movs	r2, #8
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	f043 0201 	orr.w	r2, r3, #1
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d012      	beq.n	8001b06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af2:	2201      	movs	r2, #1
 8001af4:	409a      	lsls	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	f043 0202 	orr.w	r2, r3, #2
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4013      	ands	r3, r2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d012      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2204      	movs	r2, #4
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f043 0204 	orr.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	2210      	movs	r2, #16
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d043      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2210      	movs	r2, #16
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d018      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d108      	bne.n	8001b94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d024      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	4798      	blx	r3
 8001b92:	e01f      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01b      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
 8001ba4:	e016      	b.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d107      	bne.n	8001bc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0208 	bic.w	r2, r2, #8
 8001bc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	2220      	movs	r2, #32
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 808e 	beq.w	8001d02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8086 	beq.w	8001d02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d136      	bne.n	8001c7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0216 	bic.w	r2, r2, #22
 8001c1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <HAL_DMA_IRQHandler+0x1da>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 0208 	bic.w	r2, r2, #8
 8001c4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	223f      	movs	r2, #63	; 0x3f
 8001c54:	409a      	lsls	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d07d      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
        }
        return;
 8001c7a:	e078      	b.n	8001d6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d108      	bne.n	8001caa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d030      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
 8001ca8:	e02b      	b.n	8001d02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d027      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	4798      	blx	r3
 8001cba:	e022      	b.n	8001d02 <HAL_DMA_IRQHandler+0x29e>
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0210 	bic.w	r2, r2, #16
 8001ce0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d032      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d022      	beq.n	8001d5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2205      	movs	r2, #5
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0201 	bic.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	3301      	adds	r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d307      	bcc.n	8001d4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f2      	bne.n	8001d2e <HAL_DMA_IRQHandler+0x2ca>
 8001d48:	e000      	b.n	8001d4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
 8001d6c:	e000      	b.n	8001d70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001d6e:	bf00      	nop
    }
  }
}
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b40      	cmp	r3, #64	; 0x40
 8001da4:	d108      	bne.n	8001db8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001db6:	e007      	b.n	8001dc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68ba      	ldr	r2, [r7, #8]
 8001dbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	60da      	str	r2, [r3, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3b10      	subs	r3, #16
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <DMA_CalcBaseAndBitshift+0x64>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <DMA_CalcBaseAndBitshift+0x68>)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d909      	bls.n	8001e16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	1d1a      	adds	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58
 8001e14:	e007      	b.n	8001e26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e1e:	f023 0303 	bic.w	r3, r3, #3
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	aaaaaaab 	.word	0xaaaaaaab
 8001e3c:	080056cc 	.word	0x080056cc

08001e40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d11f      	bne.n	8001e9a <DMA_CheckFifoParam+0x5a>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d856      	bhi.n	8001f0e <DMA_CheckFifoParam+0xce>
 8001e60:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <DMA_CheckFifoParam+0x28>)
 8001e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e66:	bf00      	nop
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e8b 	.word	0x08001e8b
 8001e70:	08001e79 	.word	0x08001e79
 8001e74:	08001f0f 	.word	0x08001f0f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d046      	beq.n	8001f12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e88:	e043      	b.n	8001f12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e92:	d140      	bne.n	8001f16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e98:	e03d      	b.n	8001f16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ea2:	d121      	bne.n	8001ee8 <DMA_CheckFifoParam+0xa8>
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d837      	bhi.n	8001f1a <DMA_CheckFifoParam+0xda>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <DMA_CheckFifoParam+0x70>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ec1 	.word	0x08001ec1
 8001eb4:	08001ec7 	.word	0x08001ec7
 8001eb8:	08001ec1 	.word	0x08001ec1
 8001ebc:	08001ed9 	.word	0x08001ed9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ec4:	e030      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d025      	beq.n	8001f1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ed6:	e022      	b.n	8001f1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee0:	d11f      	bne.n	8001f22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ee6:	e01c      	b.n	8001f22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d903      	bls.n	8001ef6 <DMA_CheckFifoParam+0xb6>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d003      	beq.n	8001efc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ef4:	e018      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8001efa:	e015      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f0c:	e00b      	b.n	8001f26 <DMA_CheckFifoParam+0xe6>
      break;
 8001f0e:	bf00      	nop
 8001f10:	e00a      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;
 8001f12:	bf00      	nop
 8001f14:	e008      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;
 8001f16:	bf00      	nop
 8001f18:	e006      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e004      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e002      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f22:	bf00      	nop
 8001f24:	e000      	b.n	8001f28 <DMA_CheckFifoParam+0xe8>
      break;
 8001f26:	bf00      	nop
    }
  } 
  
  return status; 
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e177      	b.n	8002244 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f54:	2201      	movs	r2, #1
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8166 	bne.w	800223e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d005      	beq.n	8001f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d130      	bne.n	8001fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 0201 	and.w	r2, r3, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d017      	beq.n	8002028 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d123      	bne.n	800207c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	08da      	lsrs	r2, r3, #3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3208      	adds	r2, #8
 800203c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	220f      	movs	r2, #15
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	08da      	lsrs	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3208      	adds	r2, #8
 8002076:	69b9      	ldr	r1, [r7, #24]
 8002078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0203 	and.w	r2, r3, #3
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80c0 	beq.w	800223e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b66      	ldr	r3, [pc, #408]	; (800225c <HAL_GPIO_Init+0x324>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a65      	ldr	r2, [pc, #404]	; (800225c <HAL_GPIO_Init+0x324>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b63      	ldr	r3, [pc, #396]	; (800225c <HAL_GPIO_Init+0x324>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020da:	4a61      	ldr	r2, [pc, #388]	; (8002260 <HAL_GPIO_Init+0x328>)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	3302      	adds	r3, #2
 80020e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_GPIO_Init+0x32c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d037      	beq.n	8002176 <HAL_GPIO_Init+0x23e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <HAL_GPIO_Init+0x330>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d031      	beq.n	8002172 <HAL_GPIO_Init+0x23a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_GPIO_Init+0x334>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <HAL_GPIO_Init+0x236>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a55      	ldr	r2, [pc, #340]	; (8002270 <HAL_GPIO_Init+0x338>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d025      	beq.n	800216a <HAL_GPIO_Init+0x232>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a54      	ldr	r2, [pc, #336]	; (8002274 <HAL_GPIO_Init+0x33c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d01f      	beq.n	8002166 <HAL_GPIO_Init+0x22e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a53      	ldr	r2, [pc, #332]	; (8002278 <HAL_GPIO_Init+0x340>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d019      	beq.n	8002162 <HAL_GPIO_Init+0x22a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_GPIO_Init+0x344>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d013      	beq.n	800215e <HAL_GPIO_Init+0x226>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a51      	ldr	r2, [pc, #324]	; (8002280 <HAL_GPIO_Init+0x348>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d00d      	beq.n	800215a <HAL_GPIO_Init+0x222>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a50      	ldr	r2, [pc, #320]	; (8002284 <HAL_GPIO_Init+0x34c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0x21e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_GPIO_Init+0x350>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d101      	bne.n	8002152 <HAL_GPIO_Init+0x21a>
 800214e:	2309      	movs	r3, #9
 8002150:	e012      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002152:	230a      	movs	r3, #10
 8002154:	e010      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002156:	2308      	movs	r3, #8
 8002158:	e00e      	b.n	8002178 <HAL_GPIO_Init+0x240>
 800215a:	2307      	movs	r3, #7
 800215c:	e00c      	b.n	8002178 <HAL_GPIO_Init+0x240>
 800215e:	2306      	movs	r3, #6
 8002160:	e00a      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002162:	2305      	movs	r3, #5
 8002164:	e008      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002166:	2304      	movs	r3, #4
 8002168:	e006      	b.n	8002178 <HAL_GPIO_Init+0x240>
 800216a:	2303      	movs	r3, #3
 800216c:	e004      	b.n	8002178 <HAL_GPIO_Init+0x240>
 800216e:	2302      	movs	r3, #2
 8002170:	e002      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x240>
 8002176:	2300      	movs	r3, #0
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f002 0203 	and.w	r2, r2, #3
 800217e:	0092      	lsls	r2, r2, #2
 8002180:	4093      	lsls	r3, r2
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002188:	4935      	ldr	r1, [pc, #212]	; (8002260 <HAL_GPIO_Init+0x328>)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	089b      	lsrs	r3, r3, #2
 800218e:	3302      	adds	r3, #2
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_GPIO_Init+0x354>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ba:	4a34      	ldr	r2, [pc, #208]	; (800228c <HAL_GPIO_Init+0x354>)
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <HAL_GPIO_Init+0x354>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_GPIO_Init+0x354>)
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021ea:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_GPIO_Init+0x354>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800220e:	4a1f      	ldr	r2, [pc, #124]	; (800228c <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <HAL_GPIO_Init+0x354>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	3301      	adds	r3, #1
 8002242:	61fb      	str	r3, [r7, #28]
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b0f      	cmp	r3, #15
 8002248:	f67f ae84 	bls.w	8001f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40013800 	.word	0x40013800
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400
 800226c:	40020800 	.word	0x40020800
 8002270:	40020c00 	.word	0x40020c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40021400 	.word	0x40021400
 800227c:	40021800 	.word	0x40021800
 8002280:	40021c00 	.word	0x40021c00
 8002284:	40022000 	.word	0x40022000
 8002288:	40022400 	.word	0x40022400
 800228c:	40013c00 	.word	0x40013c00

08002290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
 800229c:	4613      	mov	r3, r2
 800229e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022a0:	787b      	ldrb	r3, [r7, #1]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a6:	887a      	ldrh	r2, [r7, #2]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022ac:	e003      	b.n	80022b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ae:	887b      	ldrh	r3, [r7, #2]
 80022b0:	041a      	lsls	r2, r3, #16
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	619a      	str	r2, [r3, #24]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	460b      	mov	r3, r1
 80022cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d4:	887a      	ldrh	r2, [r7, #2]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4013      	ands	r3, r2
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	43d9      	mvns	r1, r3
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	400b      	ands	r3, r1
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	619a      	str	r2, [r3, #24]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e128      	b.n	800255c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a90      	ldr	r2, [pc, #576]	; (8002564 <HAL_I2S_Init+0x26c>)
 8002322:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f7fe fdad 	bl	8000e84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2202      	movs	r2, #2
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002340:	f023 030f 	bic.w	r3, r3, #15
 8002344:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2202      	movs	r2, #2
 800234c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d060      	beq.n	8002418 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d102      	bne.n	8002364 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800235e:	2310      	movs	r3, #16
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e001      	b.n	8002368 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002364:	2320      	movs	r3, #32
 8002366:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b20      	cmp	r3, #32
 800236e:	d802      	bhi.n	8002376 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002376:	2001      	movs	r0, #1
 8002378:	f001 fde8 	bl	8003f4c <HAL_RCCEx_GetPeriphCLKFreq>
 800237c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002386:	d125      	bne.n	80023d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	fbb2 f2f3 	udiv	r2, r2, r3
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ac:	3305      	adds	r3, #5
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e01f      	b.n	80023f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	461a      	mov	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	3305      	adds	r3, #5
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	e00e      	b.n	80023f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	461a      	mov	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ee:	3305      	adds	r3, #5
 80023f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4a5c      	ldr	r2, [pc, #368]	; (8002568 <HAL_I2S_Init+0x270>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	08db      	lsrs	r3, r3, #3
 80023fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	e003      	b.n	8002420 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002418:	2302      	movs	r3, #2
 800241a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d902      	bls.n	800242c <HAL_I2S_Init+0x134>
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	2bff      	cmp	r3, #255	; 0xff
 800242a:	d907      	bls.n	800243c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002430:	f043 0210 	orr.w	r2, r3, #16
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e08f      	b.n	800255c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	ea42 0103 	orr.w	r1, r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	69fa      	ldr	r2, [r7, #28]
 800244c:	430a      	orrs	r2, r1
 800244e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800245a:	f023 030f 	bic.w	r3, r3, #15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6851      	ldr	r1, [r2, #4]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6892      	ldr	r2, [r2, #8]
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68d2      	ldr	r2, [r2, #12]
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6992      	ldr	r2, [r2, #24]
 8002472:	430a      	orrs	r2, r1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d161      	bne.n	800254c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_I2S_Init+0x274>)
 800248c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a37      	ldr	r2, [pc, #220]	; (8002570 <HAL_I2S_Init+0x278>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_I2S_Init+0x1a4>
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_I2S_Init+0x27c>)
 800249a:	e001      	b.n	80024a0 <HAL_I2S_Init+0x1a8>
 800249c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4932      	ldr	r1, [pc, #200]	; (8002570 <HAL_I2S_Init+0x278>)
 80024a8:	428a      	cmp	r2, r1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2S_Init+0x1b8>
 80024ac:	4a31      	ldr	r2, [pc, #196]	; (8002574 <HAL_I2S_Init+0x27c>)
 80024ae:	e001      	b.n	80024b4 <HAL_I2S_Init+0x1bc>
 80024b0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80024b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <HAL_I2S_Init+0x278>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_I2S_Init+0x1d4>
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_I2S_Init+0x27c>)
 80024ca:	e001      	b.n	80024d0 <HAL_I2S_Init+0x1d8>
 80024cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d0:	2202      	movs	r2, #2
 80024d2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a25      	ldr	r2, [pc, #148]	; (8002570 <HAL_I2S_Init+0x278>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_I2S_Init+0x1ea>
 80024de:	4b25      	ldr	r3, [pc, #148]	; (8002574 <HAL_I2S_Init+0x27c>)
 80024e0:	e001      	b.n	80024e6 <HAL_I2S_Init+0x1ee>
 80024e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f2:	d003      	beq.n	80024fc <HAL_I2S_Init+0x204>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80024fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	e001      	b.n	8002508 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002504:	2300      	movs	r3, #0
 8002506:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002512:	4313      	orrs	r3, r2
 8002514:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800251c:	4313      	orrs	r3, r2
 800251e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002526:	4313      	orrs	r3, r2
 8002528:	b29a      	uxth	r2, r3
 800252a:	897b      	ldrh	r3, [r7, #10]
 800252c:	4313      	orrs	r3, r2
 800252e:	b29b      	uxth	r3, r3
 8002530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002534:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <HAL_I2S_Init+0x278>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_I2S_Init+0x24c>
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_I2S_Init+0x27c>)
 8002542:	e001      	b.n	8002548 <HAL_I2S_Init+0x250>
 8002544:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002548:	897a      	ldrh	r2, [r7, #10]
 800254a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	0800266f 	.word	0x0800266f
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	08002a99 	.word	0x08002a99
 8002570:	40003800 	.word	0x40003800
 8002574:	40003400 	.word	0x40003400

08002578 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffb8 	bl	8002578 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002608:	bf00      	nop
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	b292      	uxth	r2, r2
 8002624:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262a:	1c9a      	adds	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b01      	subs	r3, #1
 8002638:	b29a      	uxth	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10e      	bne.n	8002666 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002656:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff93 	bl	800258c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b04      	cmp	r3, #4
 8002688:	d13a      	bne.n	8002700 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d109      	bne.n	80026a8 <I2S_IRQHandler+0x3a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269e:	2b40      	cmp	r3, #64	; 0x40
 80026a0:	d102      	bne.n	80026a8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffb4 	bl	8002610 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d126      	bne.n	8002700 <I2S_IRQHandler+0x92>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0320 	and.w	r3, r3, #32
 80026bc:	2b20      	cmp	r3, #32
 80026be:	d11f      	bne.n	8002700 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ff50 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b03      	cmp	r3, #3
 800270a:	d136      	bne.n	800277a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d109      	bne.n	800272a <I2S_IRQHandler+0xbc>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d102      	bne.n	800272a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff45 	bl	80025b4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b08      	cmp	r3, #8
 8002732:	d122      	bne.n	800277a <I2S_IRQHandler+0x10c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d11b      	bne.n	800277a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002750:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff13 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d002      	beq.n	80027b0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027ae:	e160      	b.n	8002a72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d005      	beq.n	80027c2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80027bc:	887b      	ldrh	r3, [r7, #2]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e15a      	b.n	8002a7c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d101      	bne.n	80027d6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e152      	b.n	8002a7c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d002      	beq.n	8002802 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d114      	bne.n	800282c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002802:	887b      	ldrh	r3, [r7, #2]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 800280c:	887b      	ldrh	r3, [r7, #2]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002820:	887b      	ldrh	r3, [r7, #2]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	865a      	strh	r2, [r3, #50]	; 0x32
 800282a:	e00b      	b.n	8002844 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	887a      	ldrh	r2, [r7, #2]
 8002842:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2205      	movs	r2, #5
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	4a8b      	ldr	r2, [pc, #556]	; (8002a84 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002858:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	4a8a      	ldr	r2, [pc, #552]	; (8002a88 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002860:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	4a89      	ldr	r2, [pc, #548]	; (8002a8c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002868:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	2200      	movs	r2, #0
 8002878:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	4a83      	ldr	r2, [pc, #524]	; (8002a8c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002880:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800288c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002894:	d002      	beq.n	800289c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d16b      	bne.n	8002974 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a79      	ldr	r2, [pc, #484]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d101      	bne.n	80028b2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80028ae:	4b79      	ldr	r3, [pc, #484]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80028b0:	e001      	b.n	80028b6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80028b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b6:	330c      	adds	r3, #12
 80028b8:	4619      	mov	r1, r3
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f7ff f876 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a70      	ldr	r2, [pc, #448]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d101      	bne.n	80028d6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80028d2:	4b70      	ldr	r3, [pc, #448]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80028d4:	e001      	b.n	80028da <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80028d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	496b      	ldr	r1, [pc, #428]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80028e2:	428b      	cmp	r3, r1
 80028e4:	d101      	bne.n	80028ea <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80028e6:	4b6b      	ldr	r3, [pc, #428]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80028e8:	e001      	b.n	80028ee <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80028ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	461a      	mov	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	b29b      	uxth	r3, r3
 8002910:	f7ff f850 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0202 	orr.w	r2, r2, #2
 8002922:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002932:	f000 809e 	beq.w	8002a72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d101      	bne.n	8002944 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002940:	4b54      	ldr	r3, [pc, #336]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002942:	e001      	b.n	8002948 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4950      	ldr	r1, [pc, #320]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002950:	428b      	cmp	r3, r1
 8002952:	d101      	bne.n	8002958 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002954:	4b4f      	ldr	r3, [pc, #316]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002956:	e001      	b.n	800295c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002958:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800295c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002960:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002970:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002972:	e07e      	b.n	8002a72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002982:	d10a      	bne.n	800299a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800299a:	f107 0308 	add.w	r3, r7, #8
 800299e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a38      	ldr	r2, [pc, #224]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029b4:	e001      	b.n	80029ba <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80029b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ba:	330c      	adds	r3, #12
 80029bc:	461a      	mov	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	f7fe fff6 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80029d2:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029d4:	e001      	b.n	80029da <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80029d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	492b      	ldr	r1, [pc, #172]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80029e2:	428b      	cmp	r3, r1
 80029e4:	d101      	bne.n	80029ea <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80029e6:	4b2b      	ldr	r3, [pc, #172]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80029e8:	e001      	b.n	80029ee <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80029ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029ee:	f042 0202 	orr.w	r2, r2, #2
 80029f2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	330c      	adds	r3, #12
 8002a02:	4619      	mov	r1, r3
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f7fe ffd1 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a30:	d01e      	beq.n	8002a70 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a3e:	e001      	b.n	8002a44 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a44:	69da      	ldr	r2, [r3, #28]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4911      	ldr	r1, [pc, #68]	; (8002a90 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002a4c:	428b      	cmp	r3, r1
 8002a4e:	d101      	bne.n	8002a54 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002a52:	e001      	b.n	8002a58 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002a54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a5c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a6c:	61da      	str	r2, [r3, #28]
 8002a6e:	e000      	b.n	8002a72 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002a70:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002a7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	08002d41 	.word	0x08002d41
 8002a88:	08002d5d 	.word	0x08002d5d
 8002a8c:	08002e35 	.word	0x08002e35
 8002a90:	40003800 	.word	0x40003800
 8002a94:	40003400 	.word	0x40003400

08002a98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4aa2      	ldr	r2, [pc, #648]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002ab2:	4ba2      	ldr	r3, [pc, #648]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ab4:	e001      	b.n	8002aba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a9b      	ldr	r2, [pc, #620]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ad0:	4b9a      	ldr	r3, [pc, #616]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ad2:	e001      	b.n	8002ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae4:	d004      	beq.n	8002af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 8099 	bne.w	8002c22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d107      	bne.n	8002b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f9d5 	bl	8002eb4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d002      	beq.n	8002b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa78 	bl	8003014 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b40      	cmp	r3, #64	; 0x40
 8002b2c:	d13a      	bne.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d035      	beq.n	8002ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a7e      	ldr	r2, [pc, #504]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b42:	4b7e      	ldr	r3, [pc, #504]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b44:	e001      	b.n	8002b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4979      	ldr	r1, [pc, #484]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b52:	428b      	cmp	r3, r1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002b56:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b58:	e001      	b.n	8002b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f043 0202 	orr.w	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff fcfe 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	f040 80be 	bne.w	8002d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80b8 	beq.w	8002d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a59      	ldr	r2, [pc, #356]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d101      	bne.n	8002bda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002bd6:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bd8:	e001      	b.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bde:	685a      	ldr	r2, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4954      	ldr	r1, [pc, #336]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002be6:	428b      	cmp	r3, r1
 8002be8:	d101      	bne.n	8002bee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bec:	e001      	b.n	8002bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002bee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f043 0204 	orr.w	r2, r3, #4
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fcc0 	bl	80025a0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c20:	e084      	b.n	8002d2c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d107      	bne.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f96e 	bl	8002f18 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d107      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f9ad 	bl	8002fb0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5c:	2b40      	cmp	r3, #64	; 0x40
 8002c5e:	d12f      	bne.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02a      	beq.n	8002cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2e      	ldr	r2, [pc, #184]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d101      	bne.n	8002c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c86:	e001      	b.n	8002c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4929      	ldr	r1, [pc, #164]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c94:	428b      	cmp	r3, r1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c98:	4b28      	ldr	r3, [pc, #160]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c9a:	e001      	b.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f043 0202 	orr.w	r2, r3, #2
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fc70 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0308 	and.w	r3, r3, #8
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d131      	bne.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f003 0320 	and.w	r3, r3, #32
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d02c      	beq.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce0:	e001      	b.n	8002ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002ce2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4912      	ldr	r1, [pc, #72]	; (8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002cf2:	4b12      	ldr	r3, [pc, #72]	; (8002d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cf4:	e001      	b.n	8002cfa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002cf6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cfe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d0e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fc3b 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d2a:	e000      	b.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d2c:	bf00      	nop
}
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40003800 	.word	0x40003800
 8002d3c:	40003400 	.word	0x40003400

08002d40 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7fd ff56 	bl	8000c00 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d155      	bne.n	8002e1e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d006      	beq.n	8002d90 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d11e      	bne.n	8002dce <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <I2SEx_TxRxDMACplt+0xd0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d101      	bne.n	8002d9e <I2SEx_TxRxDMACplt+0x42>
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <I2SEx_TxRxDMACplt+0xd4>)
 8002d9c:	e001      	b.n	8002da2 <I2SEx_TxRxDMACplt+0x46>
 8002d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4920      	ldr	r1, [pc, #128]	; (8002e2c <I2SEx_TxRxDMACplt+0xd0>)
 8002daa:	428b      	cmp	r3, r1
 8002dac:	d101      	bne.n	8002db2 <I2SEx_TxRxDMACplt+0x56>
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <I2SEx_TxRxDMACplt+0xd4>)
 8002db0:	e001      	b.n	8002db6 <I2SEx_TxRxDMACplt+0x5a>
 8002db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0202 	bic.w	r2, r2, #2
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	e01d      	b.n	8002e0a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a12      	ldr	r2, [pc, #72]	; (8002e2c <I2SEx_TxRxDMACplt+0xd0>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <I2SEx_TxRxDMACplt+0x90>
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <I2SEx_TxRxDMACplt+0xd4>)
 8002dea:	e001      	b.n	8002df0 <I2SEx_TxRxDMACplt+0x94>
 8002dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	490d      	ldr	r1, [pc, #52]	; (8002e2c <I2SEx_TxRxDMACplt+0xd0>)
 8002df8:	428b      	cmp	r3, r1
 8002dfa:	d101      	bne.n	8002e00 <I2SEx_TxRxDMACplt+0xa4>
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	; (8002e30 <I2SEx_TxRxDMACplt+0xd4>)
 8002dfe:	e001      	b.n	8002e04 <I2SEx_TxRxDMACplt+0xa8>
 8002e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e04:	f022 0202 	bic.w	r2, r2, #2
 8002e08:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7fd ff64 	bl	8000cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40003800 	.word	0x40003800
 8002e30:	40003400 	.word	0x40003400

08002e34 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0203 	bic.w	r2, r2, #3
 8002e50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a15      	ldr	r2, [pc, #84]	; (8002eac <I2SEx_TxRxDMAError+0x78>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <I2SEx_TxRxDMAError+0x2c>
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <I2SEx_TxRxDMAError+0x7c>)
 8002e5e:	e001      	b.n	8002e64 <I2SEx_TxRxDMAError+0x30>
 8002e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4910      	ldr	r1, [pc, #64]	; (8002eac <I2SEx_TxRxDMAError+0x78>)
 8002e6c:	428b      	cmp	r3, r1
 8002e6e:	d101      	bne.n	8002e74 <I2SEx_TxRxDMAError+0x40>
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <I2SEx_TxRxDMAError+0x7c>)
 8002e72:	e001      	b.n	8002e78 <I2SEx_TxRxDMAError+0x44>
 8002e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e78:	f022 0203 	bic.w	r2, r2, #3
 8002e7c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f043 0208 	orr.w	r2, r3, #8
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fb7e 	bl	80025a0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40003800 	.word	0x40003800
 8002eb0:	40003400 	.word	0x40003400

08002eb4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ec6:	881a      	ldrh	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d113      	bne.n	8002f0e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ef4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd feef 	bl	8000cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c99      	adds	r1, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6251      	str	r1, [r2, #36]	; 0x24
 8002f2a:	8819      	ldrh	r1, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d101      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x22>
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f38:	e001      	b.n	8002f3e <I2SEx_TxISR_I2SExt+0x26>
 8002f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3e:	460a      	mov	r2, r1
 8002f40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d121      	bne.n	8002f9e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a12      	ldr	r2, [pc, #72]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <I2SEx_TxISR_I2SExt+0x50>
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f66:	e001      	b.n	8002f6c <I2SEx_TxISR_I2SExt+0x54>
 8002f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	490d      	ldr	r1, [pc, #52]	; (8002fa8 <I2SEx_TxISR_I2SExt+0x90>)
 8002f74:	428b      	cmp	r3, r1
 8002f76:	d101      	bne.n	8002f7c <I2SEx_TxISR_I2SExt+0x64>
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <I2SEx_TxISR_I2SExt+0x94>)
 8002f7a:	e001      	b.n	8002f80 <I2SEx_TxISR_I2SExt+0x68>
 8002f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7fd fea7 	bl	8000cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40003800 	.word	0x40003800
 8002fac:	40003400 	.word	0x40003400

08002fb0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68d8      	ldr	r0, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	1c99      	adds	r1, r3, #2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fc8:	b282      	uxth	r2, r0
 8002fca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d113      	bne.n	800300c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fe70 	bl	8000cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800300c:	bf00      	nop
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a20      	ldr	r2, [pc, #128]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <I2SEx_RxISR_I2SExt+0x16>
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003028:	e001      	b.n	800302e <I2SEx_RxISR_I2SExt+0x1a>
 800302a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800302e:	68d8      	ldr	r0, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	1c99      	adds	r1, r3, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	62d1      	str	r1, [r2, #44]	; 0x2c
 800303a:	b282      	uxth	r2, r0
 800303c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d121      	bne.n	800309a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <I2SEx_RxISR_I2SExt+0x50>
 8003060:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003062:	e001      	b.n	8003068 <I2SEx_RxISR_I2SExt+0x54>
 8003064:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	490d      	ldr	r1, [pc, #52]	; (80030a4 <I2SEx_RxISR_I2SExt+0x90>)
 8003070:	428b      	cmp	r3, r1
 8003072:	d101      	bne.n	8003078 <I2SEx_RxISR_I2SExt+0x64>
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <I2SEx_RxISR_I2SExt+0x94>)
 8003076:	e001      	b.n	800307c <I2SEx_RxISR_I2SExt+0x68>
 8003078:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800307c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003080:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d106      	bne.n	800309a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7fd fe29 	bl	8000cec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40003800 	.word	0x40003800
 80030a8:	40003400 	.word	0x40003400

080030ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030ae:	b08f      	sub	sp, #60	; 0x3c
 80030b0:	af0a      	add	r7, sp, #40	; 0x28
 80030b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e10f      	b.n	80032de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fe f889 	bl	80011f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2203      	movs	r2, #3
 80030e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fb72 	bl	80047e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	687e      	ldr	r6, [r7, #4]
 800310a:	466d      	mov	r5, sp
 800310c:	f106 0410 	add.w	r4, r6, #16
 8003110:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003112:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800311c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003120:	1d33      	adds	r3, r6, #4
 8003122:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f001 fafd 	bl	8004724 <USB_CoreInit>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e0d0      	b.n	80032de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fb60 	bl	8004808 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e04a      	b.n	80031e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	333d      	adds	r3, #61	; 0x3d
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	333c      	adds	r3, #60	; 0x3c
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	b298      	uxth	r0, r3
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3342      	adds	r3, #66	; 0x42
 800318a:	4602      	mov	r2, r0
 800318c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333f      	adds	r3, #63	; 0x3f
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3344      	adds	r3, #68	; 0x44
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	3348      	adds	r3, #72	; 0x48
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3350      	adds	r3, #80	; 0x50
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3301      	adds	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d3af      	bcc.n	800314e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e044      	b.n	800327e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031f4:	7bfa      	ldrb	r2, [r7, #15]
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	440b      	add	r3, r1
 8003202:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800320a:	7bfa      	ldrb	r2, [r7, #15]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003262:	7bfa      	ldrb	r2, [r7, #15]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	7bfb      	ldrb	r3, [r7, #15]
 800327a:	3301      	adds	r3, #1
 800327c:	73fb      	strb	r3, [r7, #15]
 800327e:	7bfa      	ldrb	r2, [r7, #15]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	d3b5      	bcc.n	80031f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	687e      	ldr	r6, [r7, #4]
 8003290:	466d      	mov	r5, sp
 8003292:	f106 0410 	add.w	r4, r6, #16
 8003296:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800329c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800329e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032a6:	1d33      	adds	r3, r6, #4
 80032a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032aa:	6838      	ldr	r0, [r7, #0]
 80032ac:	f001 fad6 	bl	800485c <USB_DevInit>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e00d      	b.n	80032de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 fc85 	bl	8004be6 <USB_DevDisconnect>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080032e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e264      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d075      	beq.n	80033f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003306:	4ba3      	ldr	r3, [pc, #652]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b04      	cmp	r3, #4
 8003310:	d00c      	beq.n	800332c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4ba0      	ldr	r3, [pc, #640]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331a:	2b08      	cmp	r3, #8
 800331c:	d112      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331e:	4b9d      	ldr	r3, [pc, #628]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800332a:	d10b      	bne.n	8003344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800332c:	4b99      	ldr	r3, [pc, #612]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d05b      	beq.n	80033f0 <HAL_RCC_OscConfig+0x108>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d157      	bne.n	80033f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e23f      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334c:	d106      	bne.n	800335c <HAL_RCC_OscConfig+0x74>
 800334e:	4b91      	ldr	r3, [pc, #580]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a90      	ldr	r2, [pc, #576]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	e01d      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003364:	d10c      	bne.n	8003380 <HAL_RCC_OscConfig+0x98>
 8003366:	4b8b      	ldr	r3, [pc, #556]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a8a      	ldr	r2, [pc, #552]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	4b88      	ldr	r3, [pc, #544]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a87      	ldr	r2, [pc, #540]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	e00b      	b.n	8003398 <HAL_RCC_OscConfig+0xb0>
 8003380:	4b84      	ldr	r3, [pc, #528]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b81      	ldr	r3, [pc, #516]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a80      	ldr	r2, [pc, #512]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d013      	beq.n	80033c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe f8fc 	bl	800159c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a8:	f7fe f8f8 	bl	800159c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b64      	cmp	r3, #100	; 0x64
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e204      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0xc0>
 80033c6:	e014      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fe f8e8 	bl	800159c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe f8e4 	bl	800159c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e1f0      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0xe8>
 80033ee:	e000      	b.n	80033f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d063      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fe:	4b65      	ldr	r3, [pc, #404]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00b      	beq.n	8003422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b62      	ldr	r3, [pc, #392]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003412:	2b08      	cmp	r3, #8
 8003414:	d11c      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d116      	bne.n	8003450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d001      	beq.n	800343a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e1c4      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b56      	ldr	r3, [pc, #344]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4952      	ldr	r1, [pc, #328]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	e03a      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d020      	beq.n	800349a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003458:	4b4f      	ldr	r3, [pc, #316]	; (8003598 <HAL_RCC_OscConfig+0x2b0>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe f89d 	bl	800159c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003466:	f7fe f899 	bl	800159c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e1a5      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	4b46      	ldr	r3, [pc, #280]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003484:	4b43      	ldr	r3, [pc, #268]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	4940      	ldr	r1, [pc, #256]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]
 8003498:	e015      	b.n	80034c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <HAL_RCC_OscConfig+0x2b0>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe f87c 	bl	800159c <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a8:	f7fe f878 	bl	800159c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e184      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0308 	and.w	r3, r3, #8
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d030      	beq.n	8003534 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034da:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_RCC_OscConfig+0x2b4>)
 80034dc:	2201      	movs	r2, #1
 80034de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f85c 	bl	800159c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034e8:	f7fe f858 	bl	800159c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e164      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x200>
 8003506:	e015      	b.n	8003534 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x2b4>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe f845 	bl	800159c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe f841 	bl	800159c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e14d      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a0 	beq.w	8003682 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <HAL_RCC_OscConfig+0x2b8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d121      	bne.n	80035c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_RCC_OscConfig+0x2b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <HAL_RCC_OscConfig+0x2b8>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fe f807 	bl	800159c <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	e011      	b.n	80035b6 <HAL_RCC_OscConfig+0x2ce>
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800
 8003598:	42470000 	.word	0x42470000
 800359c:	42470e80 	.word	0x42470e80
 80035a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a4:	f7fd fffa 	bl	800159c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e106      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b85      	ldr	r3, [pc, #532]	; (80037cc <HAL_RCC_OscConfig+0x4e4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_OscConfig+0x2f0>
 80035ca:	4b81      	ldr	r3, [pc, #516]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ce:	4a80      	ldr	r2, [pc, #512]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6713      	str	r3, [r2, #112]	; 0x70
 80035d6:	e01c      	b.n	8003612 <HAL_RCC_OscConfig+0x32a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d10c      	bne.n	80035fa <HAL_RCC_OscConfig+0x312>
 80035e0:	4b7b      	ldr	r3, [pc, #492]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a7a      	ldr	r2, [pc, #488]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035e6:	f043 0304 	orr.w	r3, r3, #4
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	4b78      	ldr	r3, [pc, #480]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
 80035f8:	e00b      	b.n	8003612 <HAL_RCC_OscConfig+0x32a>
 80035fa:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a74      	ldr	r2, [pc, #464]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b72      	ldr	r3, [pc, #456]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a71      	ldr	r2, [pc, #452]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd ffbf 	bl	800159c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fd ffbb 	bl	800159c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0c5      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003638:	4b65      	ldr	r3, [pc, #404]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ee      	beq.n	8003622 <HAL_RCC_OscConfig+0x33a>
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fd ffa9 	bl	800159c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fd ffa5 	bl	800159c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0af      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003664:	4b5a      	ldr	r3, [pc, #360]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1ee      	bne.n	800364e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003670:	7dfb      	ldrb	r3, [r7, #23]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003676:	4b56      	ldr	r3, [pc, #344]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	4a55      	ldr	r2, [pc, #340]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 800367c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 809b 	beq.w	80037c2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d05c      	beq.n	8003752 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d141      	bne.n	8003724 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b4c      	ldr	r3, [pc, #304]	; (80037d4 <HAL_RCC_OscConfig+0x4ec>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fd ff79 	bl	800159c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd ff75 	bl	800159c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e081      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c0:	4b43      	ldr	r3, [pc, #268]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	019b      	lsls	r3, r3, #6
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	3b01      	subs	r3, #1
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	061b      	lsls	r3, r3, #24
 80036f0:	4937      	ldr	r1, [pc, #220]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036f6:	4b37      	ldr	r3, [pc, #220]	; (80037d4 <HAL_RCC_OscConfig+0x4ec>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fd ff4e 	bl	800159c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd ff4a 	bl	800159c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e056      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x41c>
 8003722:	e04e      	b.n	80037c2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003724:	4b2b      	ldr	r3, [pc, #172]	; (80037d4 <HAL_RCC_OscConfig+0x4ec>)
 8003726:	2200      	movs	r2, #0
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fd ff37 	bl	800159c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fd ff33 	bl	800159c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03f      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x44a>
 8003750:	e037      	b.n	80037c2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e032      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_RCC_OscConfig+0x4e8>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d028      	beq.n	80037be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d121      	bne.n	80037be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d11a      	bne.n	80037be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800378e:	4013      	ands	r3, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003794:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003796:	4293      	cmp	r3, r2
 8003798:	d111      	bne.n	80037be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	3b01      	subs	r3, #1
 80037a8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d107      	bne.n	80037be <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d001      	beq.n	80037c2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40007000 	.word	0x40007000
 80037d0:	40023800 	.word	0x40023800
 80037d4:	42470060 	.word	0x42470060

080037d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0cc      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b68      	ldr	r3, [pc, #416]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d90c      	bls.n	8003814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b65      	ldr	r3, [pc, #404]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b63      	ldr	r3, [pc, #396]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0b8      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d020      	beq.n	8003862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d005      	beq.n	8003838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003844:	4b53      	ldr	r3, [pc, #332]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	4a52      	ldr	r2, [pc, #328]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800384e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	494d      	ldr	r1, [pc, #308]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d044      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	4b47      	ldr	r3, [pc, #284]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d119      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e07f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d003      	beq.n	8003896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003892:	2b03      	cmp	r3, #3
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d109      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e06f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e067      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b6:	4b37      	ldr	r3, [pc, #220]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f023 0203 	bic.w	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4934      	ldr	r1, [pc, #208]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c8:	f7fd fe68 	bl	800159c <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fd fe64 	bl	800159c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e04f      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e6:	4b2b      	ldr	r3, [pc, #172]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 020c 	and.w	r2, r3, #12
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1eb      	bne.n	80038d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d20c      	bcs.n	8003920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e032      	b.n	8003986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4916      	ldr	r1, [pc, #88]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0308 	and.w	r3, r3, #8
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800394a:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	490e      	ldr	r1, [pc, #56]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800395e:	f000 f821 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003962:	4602      	mov	r2, r0
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	490a      	ldr	r1, [pc, #40]	; (8003998 <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	5ccb      	ldrb	r3, [r1, r3]
 8003972:	fa22 f303 	lsr.w	r3, r2, r3
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fdc8 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023c00 	.word	0x40023c00
 8003994:	40023800 	.word	0x40023800
 8003998:	080056b4 	.word	0x080056b4
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000004 	.word	0x20000004

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	607b      	str	r3, [r7, #4]
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]
 80039b4:	2300      	movs	r3, #0
 80039b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039bc:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 030c 	and.w	r3, r3, #12
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d00d      	beq.n	80039e4 <HAL_RCC_GetSysClockFreq+0x40>
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	f200 80bd 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x1a4>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x34>
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x3a>
 80039d6:	e0b7      	b.n	8003b48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039d8:	4b61      	ldr	r3, [pc, #388]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80039da:	60bb      	str	r3, [r7, #8]
       break;
 80039dc:	e0b7      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039de:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80039e0:	60bb      	str	r3, [r7, #8]
      break;
 80039e2:	e0b4      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e4:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ee:	4b5b      	ldr	r3, [pc, #364]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d04d      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fa:	4b58      	ldr	r3, [pc, #352]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	099b      	lsrs	r3, r3, #6
 8003a00:	461a      	mov	r2, r3
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	ea02 0800 	and.w	r8, r2, r0
 8003a12:	ea03 0901 	and.w	r9, r3, r1
 8003a16:	4640      	mov	r0, r8
 8003a18:	4649      	mov	r1, r9
 8003a1a:	f04f 0200 	mov.w	r2, #0
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	014b      	lsls	r3, r1, #5
 8003a24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a28:	0142      	lsls	r2, r0, #5
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	ebb0 0008 	subs.w	r0, r0, r8
 8003a32:	eb61 0109 	sbc.w	r1, r1, r9
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	018b      	lsls	r3, r1, #6
 8003a40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a44:	0182      	lsls	r2, r0, #6
 8003a46:	1a12      	subs	r2, r2, r0
 8003a48:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4c:	f04f 0000 	mov.w	r0, #0
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	00d9      	lsls	r1, r3, #3
 8003a56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a5a:	00d0      	lsls	r0, r2, #3
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	eb12 0208 	adds.w	r2, r2, r8
 8003a64:	eb43 0309 	adc.w	r3, r3, r9
 8003a68:	f04f 0000 	mov.w	r0, #0
 8003a6c:	f04f 0100 	mov.w	r1, #0
 8003a70:	0259      	lsls	r1, r3, #9
 8003a72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003a76:	0250      	lsls	r0, r2, #9
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	461a      	mov	r2, r3
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	f7fc fbb0 	bl	80001ec <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4613      	mov	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e04a      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	ea02 0400 	and.w	r4, r2, r0
 8003aae:	ea03 0501 	and.w	r5, r3, r1
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	014b      	lsls	r3, r1, #5
 8003ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac4:	0142      	lsls	r2, r0, #5
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	1b00      	subs	r0, r0, r4
 8003acc:	eb61 0105 	sbc.w	r1, r1, r5
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	018b      	lsls	r3, r1, #6
 8003ada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ade:	0182      	lsls	r2, r0, #6
 8003ae0:	1a12      	subs	r2, r2, r0
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	f04f 0000 	mov.w	r0, #0
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	00d9      	lsls	r1, r3, #3
 8003af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af4:	00d0      	lsls	r0, r2, #3
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	1912      	adds	r2, r2, r4
 8003afc:	eb45 0303 	adc.w	r3, r5, r3
 8003b00:	f04f 0000 	mov.w	r0, #0
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	0299      	lsls	r1, r3, #10
 8003b0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b0e:	0290      	lsls	r0, r2, #10
 8003b10:	4602      	mov	r2, r0
 8003b12:	460b      	mov	r3, r1
 8003b14:	4610      	mov	r0, r2
 8003b16:	4619      	mov	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	f7fc fb64 	bl	80001ec <__aeabi_uldivmod>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4613      	mov	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0c1b      	lsrs	r3, r3, #16
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	3301      	adds	r3, #1
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	60bb      	str	r3, [r7, #8]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b4a:	60bb      	str	r3, [r7, #8]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	007a1200 	.word	0x007a1200

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	080056c4 	.word	0x080056c4

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	080056c4 	.word	0x080056c4

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d075      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c04:	4bad      	ldr	r3, [pc, #692]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fcc7 	bl	800159c <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c12:	f7fd fcc3 	bl	800159c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e18b      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c24:	4ba6      	ldr	r3, [pc, #664]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1f0      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	019a      	lsls	r2, r3, #6
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	071b      	lsls	r3, r3, #28
 8003c48:	499d      	ldr	r1, [pc, #628]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01f      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c5c:	4b98      	ldr	r3, [pc, #608]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c62:	0f1b      	lsrs	r3, r3, #28
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	019a      	lsls	r2, r3, #6
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	061b      	lsls	r3, r3, #24
 8003c76:	431a      	orrs	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	071b      	lsls	r3, r3, #28
 8003c7c:	4990      	ldr	r1, [pc, #576]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c84:	4b8e      	ldr	r3, [pc, #568]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8a:	f023 021f 	bic.w	r2, r3, #31
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	498a      	ldr	r1, [pc, #552]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	019a      	lsls	r2, r3, #6
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	071b      	lsls	r3, r3, #28
 8003cbc:	4980      	ldr	r1, [pc, #512]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cc4:	4b7d      	ldr	r3, [pc, #500]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cca:	f7fd fc67 	bl	800159c <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cd2:	f7fd fc63 	bl	800159c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e12b      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce4:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d079      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d08:	4b6e      	ldr	r3, [pc, #440]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fc45 	bl	800159c <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d14:	e008      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003d16:	f7fd fc41 	bl	800159c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e109      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d28:	4b65      	ldr	r3, [pc, #404]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d34:	d0ef      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d42:	4b5f      	ldr	r3, [pc, #380]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d48:	0f1b      	lsrs	r3, r3, #28
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	019a      	lsls	r2, r3, #6
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	061b      	lsls	r3, r3, #24
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	071b      	lsls	r3, r3, #28
 8003d62:	4957      	ldr	r1, [pc, #348]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003d6a:	4b55      	ldr	r3, [pc, #340]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d70:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	4950      	ldr	r1, [pc, #320]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d01e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d96:	0e1b      	lsrs	r3, r3, #24
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	019a      	lsls	r2, r3, #6
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	061b      	lsls	r3, r3, #24
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	071b      	lsls	r3, r3, #28
 8003db0:	4943      	ldr	r1, [pc, #268]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dbe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	493e      	ldr	r1, [pc, #248]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003dce:	4b3d      	ldr	r3, [pc, #244]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fbe2 	bl	800159c <HAL_GetTick>
 8003dd8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ddc:	f7fd fbde 	bl	800159c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0a6      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dfa:	d1ef      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 808d 	beq.w	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b29      	ldr	r3, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a27      	ldr	r2, [pc, #156]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e32:	f7fd fbb3 	bl	800159c <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fd fbaf 	bl	800159c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e077      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e60:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d039      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d032      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e8c:	4a0c      	ldr	r2, [pc, #48]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d11e      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e9e:	f7fd fb7d 	bl	800159c <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd fb79 	bl	800159c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d90b      	bls.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e03f      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003ebc:	42470068 	.word	0x42470068
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	42470070 	.word	0x42470070
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0e4      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ee8:	d10d      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efe:	4911      	ldr	r1, [pc, #68]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	608b      	str	r3, [r1, #8]
 8003f04:	e005      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	4a0e      	ldr	r2, [pc, #56]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f10:	6093      	str	r3, [r2, #8]
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f1e:	4909      	ldr	r1, [pc, #36]	; (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f38:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3718      	adds	r7, #24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	40023800 	.word	0x40023800
 8003f48:	424711e0 	.word	0x424711e0

08003f4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d13e      	bne.n	8003fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d12f      	bne.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f80:	4b1e      	ldr	r3, [pc, #120]	; (8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f82:	617b      	str	r3, [r7, #20]
          break;
 8003f84:	e02f      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f86:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f92:	d108      	bne.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9c:	4a18      	ldr	r2, [pc, #96]	; (8004000 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e007      	b.n	8003fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fbc:	099b      	lsrs	r3, r3, #6
 8003fbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	fb02 f303 	mul.w	r3, r2, r3
 8003fc8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd0:	0f1b      	lsrs	r3, r3, #28
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	617b      	str	r3, [r7, #20]
          break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
          break;
 8003fe4:	bf00      	nop
        }
      }
      break;
 8003fe6:	bf00      	nop
    }
  }
  return frequency;
 8003fe8:	697b      	ldr	r3, [r7, #20]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00bb8000 	.word	0x00bb8000
 8004000:	007a1200 	.word	0x007a1200
 8004004:	00f42400 	.word	0x00f42400

08004008 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e01c      	b.n	8004054 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	795b      	ldrb	r3, [r3, #5]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fd f810 	bl	8001050 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0204 	orr.w	r2, r2, #4
 8004044:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e03f      	b.n	80040ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fd f806 	bl	8001094 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2224      	movs	r2, #36	; 0x24
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f977 	bl	8004394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	691a      	ldr	r2, [r3, #16]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	d153      	bne.n	80041ba <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_UART_Transmit_DMA+0x26>
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e04c      	b.n	80041bc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_UART_Transmit_DMA+0x38>
 800412c:	2302      	movs	r3, #2
 800412e:	e045      	b.n	80041bc <HAL_UART_Transmit_DMA+0xc4>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	88fa      	ldrh	r2, [r7, #6]
 8004142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2221      	movs	r2, #33	; 0x21
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_UART_Transmit_DMA+0xcc>)
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_UART_Transmit_DMA+0xd0>)
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_UART_Transmit_DMA+0xd4>)
 800416e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004174:	2200      	movs	r2, #0
 8004176:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	6819      	ldr	r1, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	461a      	mov	r2, r3
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	f7fd fc10 	bl	80019b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800419c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80041b4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	0800420d 	.word	0x0800420d
 80041c8:	0800425f 	.word	0x0800425f
 80041cc:	0800427b 	.word	0x0800427b

080041d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004200:	bf00      	nop
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d113      	bne.n	8004250 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800423c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800424e:	e002      	b.n	8004256 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f7ff ffbd 	bl	80041d0 <HAL_UART_TxCpltCallback>
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff ffb9 	bl	80041e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	bf0c      	ite	eq
 800429a:	2301      	moveq	r3, #1
 800429c:	2300      	movne	r3, #0
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b21      	cmp	r3, #33	; 0x21
 80042ac:	d108      	bne.n	80042c0 <UART_DMAError+0x46>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2200      	movs	r2, #0
 80042b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80042ba:	68b8      	ldr	r0, [r7, #8]
 80042bc:	f000 f827 	bl	800430e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b22      	cmp	r3, #34	; 0x22
 80042e0:	d108      	bne.n	80042f4 <UART_DMAError+0x7a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80042ee:	68b8      	ldr	r0, [r7, #8]
 80042f0:	f000 f823 	bl	800433a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f043 0210 	orr.w	r2, r3, #16
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004300:	68b8      	ldr	r0, [r7, #8]
 8004302:	f7ff ff79 	bl	80041f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800430e:	b480      	push	{r7}
 8004310:	b083      	sub	sp, #12
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004324:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004350:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695a      	ldr	r2, [r3, #20]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0201 	bic.w	r2, r2, #1
 8004360:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0210 	bic.w	r2, r2, #16
 8004378:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004398:	b09f      	sub	sp, #124	; 0x7c
 800439a:	af00      	add	r7, sp, #0
 800439c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800439e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	ea40 0301 	orr.w	r3, r0, r1
 80043b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	431a      	orrs	r2, r3
 80043c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043d8:	f021 010c 	bic.w	r1, r1, #12
 80043dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e2:	430b      	orrs	r3, r1
 80043e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	6999      	ldr	r1, [r3, #24]
 80043f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	ea40 0301 	orr.w	r3, r0, r1
 80043fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4bc5      	ldr	r3, [pc, #788]	; (8004718 <UART_SetConfig+0x384>)
 8004404:	429a      	cmp	r2, r3
 8004406:	d004      	beq.n	8004412 <UART_SetConfig+0x7e>
 8004408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4bc3      	ldr	r3, [pc, #780]	; (800471c <UART_SetConfig+0x388>)
 800440e:	429a      	cmp	r2, r3
 8004410:	d103      	bne.n	800441a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004412:	f7ff fbc9 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004416:	6778      	str	r0, [r7, #116]	; 0x74
 8004418:	e002      	b.n	8004420 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800441a:	f7ff fbb1 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 800441e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	f040 80b6 	bne.w	8004598 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800442c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800442e:	461c      	mov	r4, r3
 8004430:	f04f 0500 	mov.w	r5, #0
 8004434:	4622      	mov	r2, r4
 8004436:	462b      	mov	r3, r5
 8004438:	1891      	adds	r1, r2, r2
 800443a:	6439      	str	r1, [r7, #64]	; 0x40
 800443c:	415b      	adcs	r3, r3
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
 8004440:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004444:	1912      	adds	r2, r2, r4
 8004446:	eb45 0303 	adc.w	r3, r5, r3
 800444a:	f04f 0000 	mov.w	r0, #0
 800444e:	f04f 0100 	mov.w	r1, #0
 8004452:	00d9      	lsls	r1, r3, #3
 8004454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004458:	00d0      	lsls	r0, r2, #3
 800445a:	4602      	mov	r2, r0
 800445c:	460b      	mov	r3, r1
 800445e:	1911      	adds	r1, r2, r4
 8004460:	6639      	str	r1, [r7, #96]	; 0x60
 8004462:	416b      	adcs	r3, r5
 8004464:	667b      	str	r3, [r7, #100]	; 0x64
 8004466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	461a      	mov	r2, r3
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	1891      	adds	r1, r2, r2
 8004472:	63b9      	str	r1, [r7, #56]	; 0x38
 8004474:	415b      	adcs	r3, r3
 8004476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800447c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004480:	f7fb feb4 	bl	80001ec <__aeabi_uldivmod>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4ba5      	ldr	r3, [pc, #660]	; (8004720 <UART_SetConfig+0x38c>)
 800448a:	fba3 2302 	umull	r2, r3, r3, r2
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	011e      	lsls	r6, r3, #4
 8004492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004494:	461c      	mov	r4, r3
 8004496:	f04f 0500 	mov.w	r5, #0
 800449a:	4622      	mov	r2, r4
 800449c:	462b      	mov	r3, r5
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6339      	str	r1, [r7, #48]	; 0x30
 80044a2:	415b      	adcs	r3, r3
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80044aa:	1912      	adds	r2, r2, r4
 80044ac:	eb45 0303 	adc.w	r3, r5, r3
 80044b0:	f04f 0000 	mov.w	r0, #0
 80044b4:	f04f 0100 	mov.w	r1, #0
 80044b8:	00d9      	lsls	r1, r3, #3
 80044ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044be:	00d0      	lsls	r0, r2, #3
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	1911      	adds	r1, r2, r4
 80044c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80044c8:	416b      	adcs	r3, r5
 80044ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	1891      	adds	r1, r2, r2
 80044d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80044da:	415b      	adcs	r3, r3
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80044e6:	f7fb fe81 	bl	80001ec <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b8c      	ldr	r3, [pc, #560]	; (8004720 <UART_SetConfig+0x38c>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	00db      	lsls	r3, r3, #3
 8004500:	3332      	adds	r3, #50	; 0x32
 8004502:	4a87      	ldr	r2, [pc, #540]	; (8004720 <UART_SetConfig+0x38c>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004510:	441e      	add	r6, r3
 8004512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004514:	4618      	mov	r0, r3
 8004516:	f04f 0100 	mov.w	r1, #0
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	1894      	adds	r4, r2, r2
 8004520:	623c      	str	r4, [r7, #32]
 8004522:	415b      	adcs	r3, r3
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452a:	1812      	adds	r2, r2, r0
 800452c:	eb41 0303 	adc.w	r3, r1, r3
 8004530:	f04f 0400 	mov.w	r4, #0
 8004534:	f04f 0500 	mov.w	r5, #0
 8004538:	00dd      	lsls	r5, r3, #3
 800453a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800453e:	00d4      	lsls	r4, r2, #3
 8004540:	4622      	mov	r2, r4
 8004542:	462b      	mov	r3, r5
 8004544:	1814      	adds	r4, r2, r0
 8004546:	653c      	str	r4, [r7, #80]	; 0x50
 8004548:	414b      	adcs	r3, r1
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
 800454c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	461a      	mov	r2, r3
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	1891      	adds	r1, r2, r2
 8004558:	61b9      	str	r1, [r7, #24]
 800455a:	415b      	adcs	r3, r3
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004562:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004566:	f7fb fe41 	bl	80001ec <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <UART_SetConfig+0x38c>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	; 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3332      	adds	r3, #50	; 0x32
 8004582:	4a67      	ldr	r2, [pc, #412]	; (8004720 <UART_SetConfig+0x38c>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4432      	add	r2, r6
 8004594:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004596:	e0b9      	b.n	800470c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800459a:	461c      	mov	r4, r3
 800459c:	f04f 0500 	mov.w	r5, #0
 80045a0:	4622      	mov	r2, r4
 80045a2:	462b      	mov	r3, r5
 80045a4:	1891      	adds	r1, r2, r2
 80045a6:	6139      	str	r1, [r7, #16]
 80045a8:	415b      	adcs	r3, r3
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045b0:	1912      	adds	r2, r2, r4
 80045b2:	eb45 0303 	adc.w	r3, r5, r3
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	00d9      	lsls	r1, r3, #3
 80045c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045c4:	00d0      	lsls	r0, r2, #3
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	eb12 0804 	adds.w	r8, r2, r4
 80045ce:	eb43 0905 	adc.w	r9, r3, r5
 80045d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	008b      	lsls	r3, r1, #2
 80045e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80045ea:	0082      	lsls	r2, r0, #2
 80045ec:	4640      	mov	r0, r8
 80045ee:	4649      	mov	r1, r9
 80045f0:	f7fb fdfc 	bl	80001ec <__aeabi_uldivmod>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <UART_SetConfig+0x38c>)
 80045fa:	fba3 2302 	umull	r2, r3, r3, r2
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	011e      	lsls	r6, r3, #4
 8004602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004604:	4618      	mov	r0, r3
 8004606:	f04f 0100 	mov.w	r1, #0
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	1894      	adds	r4, r2, r2
 8004610:	60bc      	str	r4, [r7, #8]
 8004612:	415b      	adcs	r3, r3
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800461a:	1812      	adds	r2, r2, r0
 800461c:	eb41 0303 	adc.w	r3, r1, r3
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	f04f 0500 	mov.w	r5, #0
 8004628:	00dd      	lsls	r5, r3, #3
 800462a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800462e:	00d4      	lsls	r4, r2, #3
 8004630:	4622      	mov	r2, r4
 8004632:	462b      	mov	r3, r5
 8004634:	1814      	adds	r4, r2, r0
 8004636:	64bc      	str	r4, [r7, #72]	; 0x48
 8004638:	414b      	adcs	r3, r1
 800463a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4618      	mov	r0, r3
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004654:	0082      	lsls	r2, r0, #2
 8004656:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800465a:	f7fb fdc7 	bl	80001ec <__aeabi_uldivmod>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <UART_SetConfig+0x38c>)
 8004664:	fba3 1302 	umull	r1, r3, r3, r2
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	2164      	movs	r1, #100	; 0x64
 800466c:	fb01 f303 	mul.w	r3, r1, r3
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	3332      	adds	r3, #50	; 0x32
 8004676:	4a2a      	ldr	r2, [pc, #168]	; (8004720 <UART_SetConfig+0x38c>)
 8004678:	fba2 2303 	umull	r2, r3, r2, r3
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004682:	441e      	add	r6, r3
 8004684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004686:	4618      	mov	r0, r3
 8004688:	f04f 0100 	mov.w	r1, #0
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	1894      	adds	r4, r2, r2
 8004692:	603c      	str	r4, [r7, #0]
 8004694:	415b      	adcs	r3, r3
 8004696:	607b      	str	r3, [r7, #4]
 8004698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800469c:	1812      	adds	r2, r2, r0
 800469e:	eb41 0303 	adc.w	r3, r1, r3
 80046a2:	f04f 0400 	mov.w	r4, #0
 80046a6:	f04f 0500 	mov.w	r5, #0
 80046aa:	00dd      	lsls	r5, r3, #3
 80046ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046b0:	00d4      	lsls	r4, r2, #3
 80046b2:	4622      	mov	r2, r4
 80046b4:	462b      	mov	r3, r5
 80046b6:	eb12 0a00 	adds.w	sl, r2, r0
 80046ba:	eb43 0b01 	adc.w	fp, r3, r1
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f04f 0100 	mov.w	r1, #0
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	008b      	lsls	r3, r1, #2
 80046d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046d6:	0082      	lsls	r2, r0, #2
 80046d8:	4650      	mov	r0, sl
 80046da:	4659      	mov	r1, fp
 80046dc:	f7fb fd86 	bl	80001ec <__aeabi_uldivmod>
 80046e0:	4602      	mov	r2, r0
 80046e2:	460b      	mov	r3, r1
 80046e4:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <UART_SetConfig+0x38c>)
 80046e6:	fba3 1302 	umull	r1, r3, r3, r2
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2164      	movs	r1, #100	; 0x64
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	3332      	adds	r3, #50	; 0x32
 80046f8:	4a09      	ldr	r2, [pc, #36]	; (8004720 <UART_SetConfig+0x38c>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	095b      	lsrs	r3, r3, #5
 8004700:	f003 020f 	and.w	r2, r3, #15
 8004704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4432      	add	r2, r6
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	377c      	adds	r7, #124	; 0x7c
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	40011000 	.word	0x40011000
 800471c:	40011400 	.word	0x40011400
 8004720:	51eb851f 	.word	0x51eb851f

08004724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	f107 001c 	add.w	r0, r7, #28
 8004732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2b01      	cmp	r3, #1
 800473a:	d122      	bne.n	8004782 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa56 	bl	8004c28 <USB_CoreReset>
 800477c:	4603      	mov	r3, r0
 800477e:	73fb      	strb	r3, [r7, #15]
 8004780:	e01a      	b.n	80047b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa4a 	bl	8004c28 <USB_CoreReset>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
 80047aa:	e005      	b.n	80047b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10b      	bne.n	80047d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f043 0206 	orr.w	r2, r3, #6
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e2:	b004      	add	sp, #16
 80047e4:	4770      	bx	lr

080047e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d106      	bne.n	8004834 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	e00b      	b.n	800484c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	e001      	b.n	800484c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e003      	b.n	8004854 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800484c:	2032      	movs	r0, #50	; 0x32
 800484e:	f7fc feb1 	bl	80015b4 <HAL_Delay>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800485c:	b084      	sub	sp, #16
 800485e:	b580      	push	{r7, lr}
 8004860:	b086      	sub	sp, #24
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800486a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004876:	2300      	movs	r3, #0
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	e009      	b.n	8004890 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3340      	adds	r3, #64	; 0x40
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3301      	adds	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b0e      	cmp	r3, #14
 8004894:	d9f2      	bls.n	800487c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004898:	2b00      	cmp	r3, #0
 800489a:	d11c      	bne.n	80048d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048aa:	f043 0302 	orr.w	r3, r3, #2
 80048ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
 80048d4:	e00b      	b.n	80048ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f4:	461a      	mov	r2, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004900:	4619      	mov	r1, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004908:	461a      	mov	r2, r3
 800490a:	680b      	ldr	r3, [r1, #0]
 800490c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d104      	bne.n	8004924 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800491a:	2100      	movs	r1, #0
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f949 	bl	8004bb4 <USB_SetDevSpeed>
 8004922:	e008      	b.n	8004936 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004924:	2101      	movs	r1, #1
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f944 	bl	8004bb4 <USB_SetDevSpeed>
 800492c:	e003      	b.n	8004936 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800492e:	2103      	movs	r1, #3
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f93f 	bl	8004bb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004936:	2110      	movs	r1, #16
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f8f3 	bl	8004b24 <USB_FlushTxFifo>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f911 	bl	8004b70 <USB_FlushRxFifo>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800495e:	461a      	mov	r2, r3
 8004960:	2300      	movs	r3, #0
 8004962:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496a:	461a      	mov	r2, r3
 800496c:	2300      	movs	r3, #0
 800496e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	461a      	mov	r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	e043      	b.n	8004a0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	015a      	lsls	r2, r3, #5
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4413      	add	r3, r2
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004998:	d118      	bne.n	80049cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	461a      	mov	r2, r3
 80049ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e013      	b.n	80049de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	015a      	lsls	r2, r3, #5
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4413      	add	r3, r2
 80049be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c2:	461a      	mov	r2, r3
 80049c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e008      	b.n	80049de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	461a      	mov	r2, r3
 80049fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	3301      	adds	r3, #1
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3b7      	bcc.n	8004982 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	e043      	b.n	8004aa0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a2e:	d118      	bne.n	8004a62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e013      	b.n	8004a74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a5e:	6013      	str	r3, [r2, #0]
 8004a60:	e008      	b.n	8004a74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	461a      	mov	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a92:	461a      	mov	r2, r3
 8004a94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3b7      	bcc.n	8004a18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ac8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f043 0210 	orr.w	r2, r3, #16
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <USB_DevInit+0x2c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	f043 0208 	orr.w	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b08:	f043 0304 	orr.w	r3, r3, #4
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b1c:	b004      	add	sp, #16
 8004b1e:	4770      	bx	lr
 8004b20:	803c3800 	.word	0x803c3800

08004b24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3301      	adds	r3, #1
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <USB_FlushTxFifo+0x48>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d901      	bls.n	8004b50 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e006      	b.n	8004b5e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d0f0      	beq.n	8004b3e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	00030d40 	.word	0x00030d40

08004b70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3301      	adds	r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <USB_FlushRxFifo+0x40>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d901      	bls.n	8004b94 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e006      	b.n	8004ba2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d0f0      	beq.n	8004b82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c00:	f023 0303 	bic.w	r3, r3, #3
 8004c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c14:	f043 0302 	orr.w	r3, r3, #2
 8004c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <USB_CoreReset+0x64>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e01b      	b.n	8004c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	daf2      	bge.n	8004c34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f043 0201 	orr.w	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <USB_CoreReset+0x64>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e006      	b.n	8004c7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d0f0      	beq.n	8004c5e <USB_CoreReset+0x36>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	00030d40 	.word	0x00030d40

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000000c 	.word	0x2000000c

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4d0d      	ldr	r5, [pc, #52]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca0:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca2:	1b64      	subs	r4, r4, r5
 8004ca4:	10a4      	asrs	r4, r4, #2
 8004ca6:	2600      	movs	r6, #0
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <__libc_init_array+0x40>)
 8004cae:	4c0c      	ldr	r4, [pc, #48]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb0:	f000 fce6 	bl	8005680 <_init>
 8004cb4:	1b64      	subs	r4, r4, r5
 8004cb6:	10a4      	asrs	r4, r4, #2
 8004cb8:	2600      	movs	r6, #0
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	08005740 	.word	0x08005740
 8004cd8:	08005740 	.word	0x08005740
 8004cdc:	08005740 	.word	0x08005740
 8004ce0:	08005744 	.word	0x08005744

08004ce4 <memset>:
 8004ce4:	4402      	add	r2, r0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d100      	bne.n	8004cee <memset+0xa>
 8004cec:	4770      	bx	lr
 8004cee:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf2:	e7f9      	b.n	8004ce8 <memset+0x4>

08004cf4 <_puts_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	460e      	mov	r6, r1
 8004cf8:	4605      	mov	r5, r0
 8004cfa:	b118      	cbz	r0, 8004d04 <_puts_r+0x10>
 8004cfc:	6983      	ldr	r3, [r0, #24]
 8004cfe:	b90b      	cbnz	r3, 8004d04 <_puts_r+0x10>
 8004d00:	f000 fa48 	bl	8005194 <__sinit>
 8004d04:	69ab      	ldr	r3, [r5, #24]
 8004d06:	68ac      	ldr	r4, [r5, #8]
 8004d08:	b913      	cbnz	r3, 8004d10 <_puts_r+0x1c>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fa42 	bl	8005194 <__sinit>
 8004d10:	4b2c      	ldr	r3, [pc, #176]	; (8004dc4 <_puts_r+0xd0>)
 8004d12:	429c      	cmp	r4, r3
 8004d14:	d120      	bne.n	8004d58 <_puts_r+0x64>
 8004d16:	686c      	ldr	r4, [r5, #4]
 8004d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d1a:	07db      	lsls	r3, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_puts_r+0x36>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	0598      	lsls	r0, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_puts_r+0x36>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f000 fad3 	bl	80052d0 <__retarget_lock_acquire_recursive>
 8004d2a:	89a3      	ldrh	r3, [r4, #12]
 8004d2c:	0719      	lsls	r1, r3, #28
 8004d2e:	d51d      	bpl.n	8004d6c <_puts_r+0x78>
 8004d30:	6923      	ldr	r3, [r4, #16]
 8004d32:	b1db      	cbz	r3, 8004d6c <_puts_r+0x78>
 8004d34:	3e01      	subs	r6, #1
 8004d36:	68a3      	ldr	r3, [r4, #8]
 8004d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	60a3      	str	r3, [r4, #8]
 8004d40:	bb39      	cbnz	r1, 8004d92 <_puts_r+0x9e>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da38      	bge.n	8004db8 <_puts_r+0xc4>
 8004d46:	4622      	mov	r2, r4
 8004d48:	210a      	movs	r1, #10
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	f000 f848 	bl	8004de0 <__swbuf_r>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d011      	beq.n	8004d78 <_puts_r+0x84>
 8004d54:	250a      	movs	r5, #10
 8004d56:	e011      	b.n	8004d7c <_puts_r+0x88>
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <_puts_r+0xd4>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d101      	bne.n	8004d62 <_puts_r+0x6e>
 8004d5e:	68ac      	ldr	r4, [r5, #8]
 8004d60:	e7da      	b.n	8004d18 <_puts_r+0x24>
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <_puts_r+0xd8>)
 8004d64:	429c      	cmp	r4, r3
 8004d66:	bf08      	it	eq
 8004d68:	68ec      	ldreq	r4, [r5, #12]
 8004d6a:	e7d5      	b.n	8004d18 <_puts_r+0x24>
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f000 f888 	bl	8004e84 <__swsetup_r>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d0dd      	beq.n	8004d34 <_puts_r+0x40>
 8004d78:	f04f 35ff 	mov.w	r5, #4294967295
 8004d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7e:	07da      	lsls	r2, r3, #31
 8004d80:	d405      	bmi.n	8004d8e <_puts_r+0x9a>
 8004d82:	89a3      	ldrh	r3, [r4, #12]
 8004d84:	059b      	lsls	r3, r3, #22
 8004d86:	d402      	bmi.n	8004d8e <_puts_r+0x9a>
 8004d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d8a:	f000 faa2 	bl	80052d2 <__retarget_lock_release_recursive>
 8004d8e:	4628      	mov	r0, r5
 8004d90:	bd70      	pop	{r4, r5, r6, pc}
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da04      	bge.n	8004da0 <_puts_r+0xac>
 8004d96:	69a2      	ldr	r2, [r4, #24]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	dc06      	bgt.n	8004daa <_puts_r+0xb6>
 8004d9c:	290a      	cmp	r1, #10
 8004d9e:	d004      	beq.n	8004daa <_puts_r+0xb6>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	6022      	str	r2, [r4, #0]
 8004da6:	7019      	strb	r1, [r3, #0]
 8004da8:	e7c5      	b.n	8004d36 <_puts_r+0x42>
 8004daa:	4622      	mov	r2, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 f817 	bl	8004de0 <__swbuf_r>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1bf      	bne.n	8004d36 <_puts_r+0x42>
 8004db6:	e7df      	b.n	8004d78 <_puts_r+0x84>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	250a      	movs	r5, #10
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	6022      	str	r2, [r4, #0]
 8004dc0:	701d      	strb	r5, [r3, #0]
 8004dc2:	e7db      	b.n	8004d7c <_puts_r+0x88>
 8004dc4:	080056f8 	.word	0x080056f8
 8004dc8:	08005718 	.word	0x08005718
 8004dcc:	080056d8 	.word	0x080056d8

08004dd0 <puts>:
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <puts+0xc>)
 8004dd2:	4601      	mov	r1, r0
 8004dd4:	6818      	ldr	r0, [r3, #0]
 8004dd6:	f7ff bf8d 	b.w	8004cf4 <_puts_r>
 8004dda:	bf00      	nop
 8004ddc:	2000000c 	.word	0x2000000c

08004de0 <__swbuf_r>:
 8004de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de2:	460e      	mov	r6, r1
 8004de4:	4614      	mov	r4, r2
 8004de6:	4605      	mov	r5, r0
 8004de8:	b118      	cbz	r0, 8004df2 <__swbuf_r+0x12>
 8004dea:	6983      	ldr	r3, [r0, #24]
 8004dec:	b90b      	cbnz	r3, 8004df2 <__swbuf_r+0x12>
 8004dee:	f000 f9d1 	bl	8005194 <__sinit>
 8004df2:	4b21      	ldr	r3, [pc, #132]	; (8004e78 <__swbuf_r+0x98>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d12b      	bne.n	8004e50 <__swbuf_r+0x70>
 8004df8:	686c      	ldr	r4, [r5, #4]
 8004dfa:	69a3      	ldr	r3, [r4, #24]
 8004dfc:	60a3      	str	r3, [r4, #8]
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	071a      	lsls	r2, r3, #28
 8004e02:	d52f      	bpl.n	8004e64 <__swbuf_r+0x84>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	b36b      	cbz	r3, 8004e64 <__swbuf_r+0x84>
 8004e08:	6923      	ldr	r3, [r4, #16]
 8004e0a:	6820      	ldr	r0, [r4, #0]
 8004e0c:	1ac0      	subs	r0, r0, r3
 8004e0e:	6963      	ldr	r3, [r4, #20]
 8004e10:	b2f6      	uxtb	r6, r6
 8004e12:	4283      	cmp	r3, r0
 8004e14:	4637      	mov	r7, r6
 8004e16:	dc04      	bgt.n	8004e22 <__swbuf_r+0x42>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 f926 	bl	800506c <_fflush_r>
 8004e20:	bb30      	cbnz	r0, 8004e70 <__swbuf_r+0x90>
 8004e22:	68a3      	ldr	r3, [r4, #8]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	60a3      	str	r3, [r4, #8]
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	701e      	strb	r6, [r3, #0]
 8004e30:	6963      	ldr	r3, [r4, #20]
 8004e32:	3001      	adds	r0, #1
 8004e34:	4283      	cmp	r3, r0
 8004e36:	d004      	beq.n	8004e42 <__swbuf_r+0x62>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	07db      	lsls	r3, r3, #31
 8004e3c:	d506      	bpl.n	8004e4c <__swbuf_r+0x6c>
 8004e3e:	2e0a      	cmp	r6, #10
 8004e40:	d104      	bne.n	8004e4c <__swbuf_r+0x6c>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4628      	mov	r0, r5
 8004e46:	f000 f911 	bl	800506c <_fflush_r>
 8004e4a:	b988      	cbnz	r0, 8004e70 <__swbuf_r+0x90>
 8004e4c:	4638      	mov	r0, r7
 8004e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <__swbuf_r+0x9c>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d101      	bne.n	8004e5a <__swbuf_r+0x7a>
 8004e56:	68ac      	ldr	r4, [r5, #8]
 8004e58:	e7cf      	b.n	8004dfa <__swbuf_r+0x1a>
 8004e5a:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <__swbuf_r+0xa0>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	bf08      	it	eq
 8004e60:	68ec      	ldreq	r4, [r5, #12]
 8004e62:	e7ca      	b.n	8004dfa <__swbuf_r+0x1a>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4628      	mov	r0, r5
 8004e68:	f000 f80c 	bl	8004e84 <__swsetup_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	d0cb      	beq.n	8004e08 <__swbuf_r+0x28>
 8004e70:	f04f 37ff 	mov.w	r7, #4294967295
 8004e74:	e7ea      	b.n	8004e4c <__swbuf_r+0x6c>
 8004e76:	bf00      	nop
 8004e78:	080056f8 	.word	0x080056f8
 8004e7c:	08005718 	.word	0x08005718
 8004e80:	080056d8 	.word	0x080056d8

08004e84 <__swsetup_r>:
 8004e84:	4b32      	ldr	r3, [pc, #200]	; (8004f50 <__swsetup_r+0xcc>)
 8004e86:	b570      	push	{r4, r5, r6, lr}
 8004e88:	681d      	ldr	r5, [r3, #0]
 8004e8a:	4606      	mov	r6, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	b125      	cbz	r5, 8004e9a <__swsetup_r+0x16>
 8004e90:	69ab      	ldr	r3, [r5, #24]
 8004e92:	b913      	cbnz	r3, 8004e9a <__swsetup_r+0x16>
 8004e94:	4628      	mov	r0, r5
 8004e96:	f000 f97d 	bl	8005194 <__sinit>
 8004e9a:	4b2e      	ldr	r3, [pc, #184]	; (8004f54 <__swsetup_r+0xd0>)
 8004e9c:	429c      	cmp	r4, r3
 8004e9e:	d10f      	bne.n	8004ec0 <__swsetup_r+0x3c>
 8004ea0:	686c      	ldr	r4, [r5, #4]
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea8:	0719      	lsls	r1, r3, #28
 8004eaa:	d42c      	bmi.n	8004f06 <__swsetup_r+0x82>
 8004eac:	06dd      	lsls	r5, r3, #27
 8004eae:	d411      	bmi.n	8004ed4 <__swsetup_r+0x50>
 8004eb0:	2309      	movs	r3, #9
 8004eb2:	6033      	str	r3, [r6, #0]
 8004eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e03e      	b.n	8004f3e <__swsetup_r+0xba>
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <__swsetup_r+0xd4>)
 8004ec2:	429c      	cmp	r4, r3
 8004ec4:	d101      	bne.n	8004eca <__swsetup_r+0x46>
 8004ec6:	68ac      	ldr	r4, [r5, #8]
 8004ec8:	e7eb      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004eca:	4b24      	ldr	r3, [pc, #144]	; (8004f5c <__swsetup_r+0xd8>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	bf08      	it	eq
 8004ed0:	68ec      	ldreq	r4, [r5, #12]
 8004ed2:	e7e6      	b.n	8004ea2 <__swsetup_r+0x1e>
 8004ed4:	0758      	lsls	r0, r3, #29
 8004ed6:	d512      	bpl.n	8004efe <__swsetup_r+0x7a>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004eda:	b141      	cbz	r1, 8004eee <__swsetup_r+0x6a>
 8004edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee0:	4299      	cmp	r1, r3
 8004ee2:	d002      	beq.n	8004eea <__swsetup_r+0x66>
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f000 fa59 	bl	800539c <_free_r>
 8004eea:	2300      	movs	r3, #0
 8004eec:	6363      	str	r3, [r4, #52]	; 0x34
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef4:	81a3      	strh	r3, [r4, #12]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	6923      	ldr	r3, [r4, #16]
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	f043 0308 	orr.w	r3, r3, #8
 8004f04:	81a3      	strh	r3, [r4, #12]
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	b94b      	cbnz	r3, 8004f1e <__swsetup_r+0x9a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d003      	beq.n	8004f1e <__swsetup_r+0x9a>
 8004f16:	4621      	mov	r1, r4
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 f9ff 	bl	800531c <__smakebuf_r>
 8004f1e:	89a0      	ldrh	r0, [r4, #12]
 8004f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f24:	f010 0301 	ands.w	r3, r0, #1
 8004f28:	d00a      	beq.n	8004f40 <__swsetup_r+0xbc>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60a3      	str	r3, [r4, #8]
 8004f2e:	6963      	ldr	r3, [r4, #20]
 8004f30:	425b      	negs	r3, r3
 8004f32:	61a3      	str	r3, [r4, #24]
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	b943      	cbnz	r3, 8004f4a <__swsetup_r+0xc6>
 8004f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f3c:	d1ba      	bne.n	8004eb4 <__swsetup_r+0x30>
 8004f3e:	bd70      	pop	{r4, r5, r6, pc}
 8004f40:	0781      	lsls	r1, r0, #30
 8004f42:	bf58      	it	pl
 8004f44:	6963      	ldrpl	r3, [r4, #20]
 8004f46:	60a3      	str	r3, [r4, #8]
 8004f48:	e7f4      	b.n	8004f34 <__swsetup_r+0xb0>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e7f7      	b.n	8004f3e <__swsetup_r+0xba>
 8004f4e:	bf00      	nop
 8004f50:	2000000c 	.word	0x2000000c
 8004f54:	080056f8 	.word	0x080056f8
 8004f58:	08005718 	.word	0x08005718
 8004f5c:	080056d8 	.word	0x080056d8

08004f60 <__sflush_r>:
 8004f60:	898a      	ldrh	r2, [r1, #12]
 8004f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f66:	4605      	mov	r5, r0
 8004f68:	0710      	lsls	r0, r2, #28
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	d458      	bmi.n	8005020 <__sflush_r+0xc0>
 8004f6e:	684b      	ldr	r3, [r1, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc05      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dc02      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d0f9      	beq.n	8004f7a <__sflush_r+0x1a>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f8c:	682f      	ldr	r7, [r5, #0]
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	d032      	beq.n	8004ff8 <__sflush_r+0x98>
 8004f92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	075a      	lsls	r2, r3, #29
 8004f98:	d505      	bpl.n	8004fa6 <__sflush_r+0x46>
 8004f9a:	6863      	ldr	r3, [r4, #4]
 8004f9c:	1ac0      	subs	r0, r0, r3
 8004f9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa0:	b10b      	cbz	r3, 8004fa6 <__sflush_r+0x46>
 8004fa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fa4:	1ac0      	subs	r0, r0, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b0      	blx	r6
 8004fb2:	1c43      	adds	r3, r0, #1
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	d106      	bne.n	8004fc6 <__sflush_r+0x66>
 8004fb8:	6829      	ldr	r1, [r5, #0]
 8004fba:	291d      	cmp	r1, #29
 8004fbc:	d82c      	bhi.n	8005018 <__sflush_r+0xb8>
 8004fbe:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <__sflush_r+0x108>)
 8004fc0:	40ca      	lsrs	r2, r1
 8004fc2:	07d6      	lsls	r6, r2, #31
 8004fc4:	d528      	bpl.n	8005018 <__sflush_r+0xb8>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	6062      	str	r2, [r4, #4]
 8004fca:	04d9      	lsls	r1, r3, #19
 8004fcc:	6922      	ldr	r2, [r4, #16]
 8004fce:	6022      	str	r2, [r4, #0]
 8004fd0:	d504      	bpl.n	8004fdc <__sflush_r+0x7c>
 8004fd2:	1c42      	adds	r2, r0, #1
 8004fd4:	d101      	bne.n	8004fda <__sflush_r+0x7a>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	b903      	cbnz	r3, 8004fdc <__sflush_r+0x7c>
 8004fda:	6560      	str	r0, [r4, #84]	; 0x54
 8004fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fde:	602f      	str	r7, [r5, #0]
 8004fe0:	2900      	cmp	r1, #0
 8004fe2:	d0ca      	beq.n	8004f7a <__sflush_r+0x1a>
 8004fe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe8:	4299      	cmp	r1, r3
 8004fea:	d002      	beq.n	8004ff2 <__sflush_r+0x92>
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 f9d5 	bl	800539c <_free_r>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ff6:	e7c1      	b.n	8004f7c <__sflush_r+0x1c>
 8004ff8:	6a21      	ldr	r1, [r4, #32]
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	1c41      	adds	r1, r0, #1
 8005002:	d1c7      	bne.n	8004f94 <__sflush_r+0x34>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0c4      	beq.n	8004f94 <__sflush_r+0x34>
 800500a:	2b1d      	cmp	r3, #29
 800500c:	d001      	beq.n	8005012 <__sflush_r+0xb2>
 800500e:	2b16      	cmp	r3, #22
 8005010:	d101      	bne.n	8005016 <__sflush_r+0xb6>
 8005012:	602f      	str	r7, [r5, #0]
 8005014:	e7b1      	b.n	8004f7a <__sflush_r+0x1a>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	e7ad      	b.n	8004f7c <__sflush_r+0x1c>
 8005020:	690f      	ldr	r7, [r1, #16]
 8005022:	2f00      	cmp	r7, #0
 8005024:	d0a9      	beq.n	8004f7a <__sflush_r+0x1a>
 8005026:	0793      	lsls	r3, r2, #30
 8005028:	680e      	ldr	r6, [r1, #0]
 800502a:	bf08      	it	eq
 800502c:	694b      	ldreq	r3, [r1, #20]
 800502e:	600f      	str	r7, [r1, #0]
 8005030:	bf18      	it	ne
 8005032:	2300      	movne	r3, #0
 8005034:	eba6 0807 	sub.w	r8, r6, r7
 8005038:	608b      	str	r3, [r1, #8]
 800503a:	f1b8 0f00 	cmp.w	r8, #0
 800503e:	dd9c      	ble.n	8004f7a <__sflush_r+0x1a>
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005044:	4643      	mov	r3, r8
 8005046:	463a      	mov	r2, r7
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	2800      	cmp	r0, #0
 800504e:	dc06      	bgt.n	800505e <__sflush_r+0xfe>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	e78e      	b.n	8004f7c <__sflush_r+0x1c>
 800505e:	4407      	add	r7, r0
 8005060:	eba8 0800 	sub.w	r8, r8, r0
 8005064:	e7e9      	b.n	800503a <__sflush_r+0xda>
 8005066:	bf00      	nop
 8005068:	20400001 	.word	0x20400001

0800506c <_fflush_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	4605      	mov	r5, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b913      	cbnz	r3, 800507c <_fflush_r+0x10>
 8005076:	2500      	movs	r5, #0
 8005078:	4628      	mov	r0, r5
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	b118      	cbz	r0, 8005086 <_fflush_r+0x1a>
 800507e:	6983      	ldr	r3, [r0, #24]
 8005080:	b90b      	cbnz	r3, 8005086 <_fflush_r+0x1a>
 8005082:	f000 f887 	bl	8005194 <__sinit>
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <_fflush_r+0x6c>)
 8005088:	429c      	cmp	r4, r3
 800508a:	d11b      	bne.n	80050c4 <_fflush_r+0x58>
 800508c:	686c      	ldr	r4, [r5, #4]
 800508e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d0ef      	beq.n	8005076 <_fflush_r+0xa>
 8005096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005098:	07d0      	lsls	r0, r2, #31
 800509a:	d404      	bmi.n	80050a6 <_fflush_r+0x3a>
 800509c:	0599      	lsls	r1, r3, #22
 800509e:	d402      	bmi.n	80050a6 <_fflush_r+0x3a>
 80050a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050a2:	f000 f915 	bl	80052d0 <__retarget_lock_acquire_recursive>
 80050a6:	4628      	mov	r0, r5
 80050a8:	4621      	mov	r1, r4
 80050aa:	f7ff ff59 	bl	8004f60 <__sflush_r>
 80050ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050b0:	07da      	lsls	r2, r3, #31
 80050b2:	4605      	mov	r5, r0
 80050b4:	d4e0      	bmi.n	8005078 <_fflush_r+0xc>
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	059b      	lsls	r3, r3, #22
 80050ba:	d4dd      	bmi.n	8005078 <_fflush_r+0xc>
 80050bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050be:	f000 f908 	bl	80052d2 <__retarget_lock_release_recursive>
 80050c2:	e7d9      	b.n	8005078 <_fflush_r+0xc>
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <_fflush_r+0x70>)
 80050c6:	429c      	cmp	r4, r3
 80050c8:	d101      	bne.n	80050ce <_fflush_r+0x62>
 80050ca:	68ac      	ldr	r4, [r5, #8]
 80050cc:	e7df      	b.n	800508e <_fflush_r+0x22>
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <_fflush_r+0x74>)
 80050d0:	429c      	cmp	r4, r3
 80050d2:	bf08      	it	eq
 80050d4:	68ec      	ldreq	r4, [r5, #12]
 80050d6:	e7da      	b.n	800508e <_fflush_r+0x22>
 80050d8:	080056f8 	.word	0x080056f8
 80050dc:	08005718 	.word	0x08005718
 80050e0:	080056d8 	.word	0x080056d8

080050e4 <std>:
 80050e4:	2300      	movs	r3, #0
 80050e6:	b510      	push	{r4, lr}
 80050e8:	4604      	mov	r4, r0
 80050ea:	e9c0 3300 	strd	r3, r3, [r0]
 80050ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f2:	6083      	str	r3, [r0, #8]
 80050f4:	8181      	strh	r1, [r0, #12]
 80050f6:	6643      	str	r3, [r0, #100]	; 0x64
 80050f8:	81c2      	strh	r2, [r0, #14]
 80050fa:	6183      	str	r3, [r0, #24]
 80050fc:	4619      	mov	r1, r3
 80050fe:	2208      	movs	r2, #8
 8005100:	305c      	adds	r0, #92	; 0x5c
 8005102:	f7ff fdef 	bl	8004ce4 <memset>
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <std+0x38>)
 8005108:	6263      	str	r3, [r4, #36]	; 0x24
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <std+0x3c>)
 800510c:	62a3      	str	r3, [r4, #40]	; 0x28
 800510e:	4b05      	ldr	r3, [pc, #20]	; (8005124 <std+0x40>)
 8005110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <std+0x44>)
 8005114:	6224      	str	r4, [r4, #32]
 8005116:	6323      	str	r3, [r4, #48]	; 0x30
 8005118:	bd10      	pop	{r4, pc}
 800511a:	bf00      	nop
 800511c:	08005511 	.word	0x08005511
 8005120:	08005533 	.word	0x08005533
 8005124:	0800556b 	.word	0x0800556b
 8005128:	0800558f 	.word	0x0800558f

0800512c <_cleanup_r>:
 800512c:	4901      	ldr	r1, [pc, #4]	; (8005134 <_cleanup_r+0x8>)
 800512e:	f000 b8af 	b.w	8005290 <_fwalk_reent>
 8005132:	bf00      	nop
 8005134:	0800506d 	.word	0x0800506d

08005138 <__sfmoreglue>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	1e4a      	subs	r2, r1, #1
 800513c:	2568      	movs	r5, #104	; 0x68
 800513e:	4355      	muls	r5, r2
 8005140:	460e      	mov	r6, r1
 8005142:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005146:	f000 f979 	bl	800543c <_malloc_r>
 800514a:	4604      	mov	r4, r0
 800514c:	b140      	cbz	r0, 8005160 <__sfmoreglue+0x28>
 800514e:	2100      	movs	r1, #0
 8005150:	e9c0 1600 	strd	r1, r6, [r0]
 8005154:	300c      	adds	r0, #12
 8005156:	60a0      	str	r0, [r4, #8]
 8005158:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800515c:	f7ff fdc2 	bl	8004ce4 <memset>
 8005160:	4620      	mov	r0, r4
 8005162:	bd70      	pop	{r4, r5, r6, pc}

08005164 <__sfp_lock_acquire>:
 8005164:	4801      	ldr	r0, [pc, #4]	; (800516c <__sfp_lock_acquire+0x8>)
 8005166:	f000 b8b3 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 800516a:	bf00      	nop
 800516c:	2000a368 	.word	0x2000a368

08005170 <__sfp_lock_release>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__sfp_lock_release+0x8>)
 8005172:	f000 b8ae 	b.w	80052d2 <__retarget_lock_release_recursive>
 8005176:	bf00      	nop
 8005178:	2000a368 	.word	0x2000a368

0800517c <__sinit_lock_acquire>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__sinit_lock_acquire+0x8>)
 800517e:	f000 b8a7 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 8005182:	bf00      	nop
 8005184:	2000a363 	.word	0x2000a363

08005188 <__sinit_lock_release>:
 8005188:	4801      	ldr	r0, [pc, #4]	; (8005190 <__sinit_lock_release+0x8>)
 800518a:	f000 b8a2 	b.w	80052d2 <__retarget_lock_release_recursive>
 800518e:	bf00      	nop
 8005190:	2000a363 	.word	0x2000a363

08005194 <__sinit>:
 8005194:	b510      	push	{r4, lr}
 8005196:	4604      	mov	r4, r0
 8005198:	f7ff fff0 	bl	800517c <__sinit_lock_acquire>
 800519c:	69a3      	ldr	r3, [r4, #24]
 800519e:	b11b      	cbz	r3, 80051a8 <__sinit+0x14>
 80051a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051a4:	f7ff bff0 	b.w	8005188 <__sinit_lock_release>
 80051a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80051ac:	6523      	str	r3, [r4, #80]	; 0x50
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <__sinit+0x68>)
 80051b0:	4a13      	ldr	r2, [pc, #76]	; (8005200 <__sinit+0x6c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	bf04      	itt	eq
 80051ba:	2301      	moveq	r3, #1
 80051bc:	61a3      	streq	r3, [r4, #24]
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f820 	bl	8005204 <__sfp>
 80051c4:	6060      	str	r0, [r4, #4]
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 f81c 	bl	8005204 <__sfp>
 80051cc:	60a0      	str	r0, [r4, #8]
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 f818 	bl	8005204 <__sfp>
 80051d4:	2200      	movs	r2, #0
 80051d6:	60e0      	str	r0, [r4, #12]
 80051d8:	2104      	movs	r1, #4
 80051da:	6860      	ldr	r0, [r4, #4]
 80051dc:	f7ff ff82 	bl	80050e4 <std>
 80051e0:	68a0      	ldr	r0, [r4, #8]
 80051e2:	2201      	movs	r2, #1
 80051e4:	2109      	movs	r1, #9
 80051e6:	f7ff ff7d 	bl	80050e4 <std>
 80051ea:	68e0      	ldr	r0, [r4, #12]
 80051ec:	2202      	movs	r2, #2
 80051ee:	2112      	movs	r1, #18
 80051f0:	f7ff ff78 	bl	80050e4 <std>
 80051f4:	2301      	movs	r3, #1
 80051f6:	61a3      	str	r3, [r4, #24]
 80051f8:	e7d2      	b.n	80051a0 <__sinit+0xc>
 80051fa:	bf00      	nop
 80051fc:	080056d4 	.word	0x080056d4
 8005200:	0800512d 	.word	0x0800512d

08005204 <__sfp>:
 8005204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005206:	4607      	mov	r7, r0
 8005208:	f7ff ffac 	bl	8005164 <__sfp_lock_acquire>
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <__sfp+0x84>)
 800520e:	681e      	ldr	r6, [r3, #0]
 8005210:	69b3      	ldr	r3, [r6, #24]
 8005212:	b913      	cbnz	r3, 800521a <__sfp+0x16>
 8005214:	4630      	mov	r0, r6
 8005216:	f7ff ffbd 	bl	8005194 <__sinit>
 800521a:	3648      	adds	r6, #72	; 0x48
 800521c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005220:	3b01      	subs	r3, #1
 8005222:	d503      	bpl.n	800522c <__sfp+0x28>
 8005224:	6833      	ldr	r3, [r6, #0]
 8005226:	b30b      	cbz	r3, 800526c <__sfp+0x68>
 8005228:	6836      	ldr	r6, [r6, #0]
 800522a:	e7f7      	b.n	800521c <__sfp+0x18>
 800522c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005230:	b9d5      	cbnz	r5, 8005268 <__sfp+0x64>
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <__sfp+0x88>)
 8005234:	60e3      	str	r3, [r4, #12]
 8005236:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800523a:	6665      	str	r5, [r4, #100]	; 0x64
 800523c:	f000 f847 	bl	80052ce <__retarget_lock_init_recursive>
 8005240:	f7ff ff96 	bl	8005170 <__sfp_lock_release>
 8005244:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005248:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800524c:	6025      	str	r5, [r4, #0]
 800524e:	61a5      	str	r5, [r4, #24]
 8005250:	2208      	movs	r2, #8
 8005252:	4629      	mov	r1, r5
 8005254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005258:	f7ff fd44 	bl	8004ce4 <memset>
 800525c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005264:	4620      	mov	r0, r4
 8005266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005268:	3468      	adds	r4, #104	; 0x68
 800526a:	e7d9      	b.n	8005220 <__sfp+0x1c>
 800526c:	2104      	movs	r1, #4
 800526e:	4638      	mov	r0, r7
 8005270:	f7ff ff62 	bl	8005138 <__sfmoreglue>
 8005274:	4604      	mov	r4, r0
 8005276:	6030      	str	r0, [r6, #0]
 8005278:	2800      	cmp	r0, #0
 800527a:	d1d5      	bne.n	8005228 <__sfp+0x24>
 800527c:	f7ff ff78 	bl	8005170 <__sfp_lock_release>
 8005280:	230c      	movs	r3, #12
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	e7ee      	b.n	8005264 <__sfp+0x60>
 8005286:	bf00      	nop
 8005288:	080056d4 	.word	0x080056d4
 800528c:	ffff0001 	.word	0xffff0001

08005290 <_fwalk_reent>:
 8005290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005294:	4606      	mov	r6, r0
 8005296:	4688      	mov	r8, r1
 8005298:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800529c:	2700      	movs	r7, #0
 800529e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052a2:	f1b9 0901 	subs.w	r9, r9, #1
 80052a6:	d505      	bpl.n	80052b4 <_fwalk_reent+0x24>
 80052a8:	6824      	ldr	r4, [r4, #0]
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d1f7      	bne.n	800529e <_fwalk_reent+0xe>
 80052ae:	4638      	mov	r0, r7
 80052b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052b4:	89ab      	ldrh	r3, [r5, #12]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d907      	bls.n	80052ca <_fwalk_reent+0x3a>
 80052ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052be:	3301      	adds	r3, #1
 80052c0:	d003      	beq.n	80052ca <_fwalk_reent+0x3a>
 80052c2:	4629      	mov	r1, r5
 80052c4:	4630      	mov	r0, r6
 80052c6:	47c0      	blx	r8
 80052c8:	4307      	orrs	r7, r0
 80052ca:	3568      	adds	r5, #104	; 0x68
 80052cc:	e7e9      	b.n	80052a2 <_fwalk_reent+0x12>

080052ce <__retarget_lock_init_recursive>:
 80052ce:	4770      	bx	lr

080052d0 <__retarget_lock_acquire_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_release_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__swhatbuf_r>:
 80052d4:	b570      	push	{r4, r5, r6, lr}
 80052d6:	460e      	mov	r6, r1
 80052d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052dc:	2900      	cmp	r1, #0
 80052de:	b096      	sub	sp, #88	; 0x58
 80052e0:	4614      	mov	r4, r2
 80052e2:	461d      	mov	r5, r3
 80052e4:	da07      	bge.n	80052f6 <__swhatbuf_r+0x22>
 80052e6:	2300      	movs	r3, #0
 80052e8:	602b      	str	r3, [r5, #0]
 80052ea:	89b3      	ldrh	r3, [r6, #12]
 80052ec:	061a      	lsls	r2, r3, #24
 80052ee:	d410      	bmi.n	8005312 <__swhatbuf_r+0x3e>
 80052f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052f4:	e00e      	b.n	8005314 <__swhatbuf_r+0x40>
 80052f6:	466a      	mov	r2, sp
 80052f8:	f000 f970 	bl	80055dc <_fstat_r>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	dbf2      	blt.n	80052e6 <__swhatbuf_r+0x12>
 8005300:	9a01      	ldr	r2, [sp, #4]
 8005302:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005306:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800530a:	425a      	negs	r2, r3
 800530c:	415a      	adcs	r2, r3
 800530e:	602a      	str	r2, [r5, #0]
 8005310:	e7ee      	b.n	80052f0 <__swhatbuf_r+0x1c>
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	2000      	movs	r0, #0
 8005316:	6023      	str	r3, [r4, #0]
 8005318:	b016      	add	sp, #88	; 0x58
 800531a:	bd70      	pop	{r4, r5, r6, pc}

0800531c <__smakebuf_r>:
 800531c:	898b      	ldrh	r3, [r1, #12]
 800531e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005320:	079d      	lsls	r5, r3, #30
 8005322:	4606      	mov	r6, r0
 8005324:	460c      	mov	r4, r1
 8005326:	d507      	bpl.n	8005338 <__smakebuf_r+0x1c>
 8005328:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	2301      	movs	r3, #1
 8005332:	6163      	str	r3, [r4, #20]
 8005334:	b002      	add	sp, #8
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	ab01      	add	r3, sp, #4
 800533a:	466a      	mov	r2, sp
 800533c:	f7ff ffca 	bl	80052d4 <__swhatbuf_r>
 8005340:	9900      	ldr	r1, [sp, #0]
 8005342:	4605      	mov	r5, r0
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f879 	bl	800543c <_malloc_r>
 800534a:	b948      	cbnz	r0, 8005360 <__smakebuf_r+0x44>
 800534c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005350:	059a      	lsls	r2, r3, #22
 8005352:	d4ef      	bmi.n	8005334 <__smakebuf_r+0x18>
 8005354:	f023 0303 	bic.w	r3, r3, #3
 8005358:	f043 0302 	orr.w	r3, r3, #2
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	e7e3      	b.n	8005328 <__smakebuf_r+0xc>
 8005360:	4b0d      	ldr	r3, [pc, #52]	; (8005398 <__smakebuf_r+0x7c>)
 8005362:	62b3      	str	r3, [r6, #40]	; 0x28
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	6163      	str	r3, [r4, #20]
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	6120      	str	r0, [r4, #16]
 8005376:	b15b      	cbz	r3, 8005390 <__smakebuf_r+0x74>
 8005378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800537c:	4630      	mov	r0, r6
 800537e:	f000 f93f 	bl	8005600 <_isatty_r>
 8005382:	b128      	cbz	r0, 8005390 <__smakebuf_r+0x74>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	f043 0301 	orr.w	r3, r3, #1
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	89a0      	ldrh	r0, [r4, #12]
 8005392:	4305      	orrs	r5, r0
 8005394:	81a5      	strh	r5, [r4, #12]
 8005396:	e7cd      	b.n	8005334 <__smakebuf_r+0x18>
 8005398:	0800512d 	.word	0x0800512d

0800539c <_free_r>:
 800539c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800539e:	2900      	cmp	r1, #0
 80053a0:	d048      	beq.n	8005434 <_free_r+0x98>
 80053a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053a6:	9001      	str	r0, [sp, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f1a1 0404 	sub.w	r4, r1, #4
 80053ae:	bfb8      	it	lt
 80053b0:	18e4      	addlt	r4, r4, r3
 80053b2:	f000 f947 	bl	8005644 <__malloc_lock>
 80053b6:	4a20      	ldr	r2, [pc, #128]	; (8005438 <_free_r+0x9c>)
 80053b8:	9801      	ldr	r0, [sp, #4]
 80053ba:	6813      	ldr	r3, [r2, #0]
 80053bc:	4615      	mov	r5, r2
 80053be:	b933      	cbnz	r3, 80053ce <_free_r+0x32>
 80053c0:	6063      	str	r3, [r4, #4]
 80053c2:	6014      	str	r4, [r2, #0]
 80053c4:	b003      	add	sp, #12
 80053c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ca:	f000 b941 	b.w	8005650 <__malloc_unlock>
 80053ce:	42a3      	cmp	r3, r4
 80053d0:	d90b      	bls.n	80053ea <_free_r+0x4e>
 80053d2:	6821      	ldr	r1, [r4, #0]
 80053d4:	1862      	adds	r2, r4, r1
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bf04      	itt	eq
 80053da:	681a      	ldreq	r2, [r3, #0]
 80053dc:	685b      	ldreq	r3, [r3, #4]
 80053de:	6063      	str	r3, [r4, #4]
 80053e0:	bf04      	itt	eq
 80053e2:	1852      	addeq	r2, r2, r1
 80053e4:	6022      	streq	r2, [r4, #0]
 80053e6:	602c      	str	r4, [r5, #0]
 80053e8:	e7ec      	b.n	80053c4 <_free_r+0x28>
 80053ea:	461a      	mov	r2, r3
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	b10b      	cbz	r3, 80053f4 <_free_r+0x58>
 80053f0:	42a3      	cmp	r3, r4
 80053f2:	d9fa      	bls.n	80053ea <_free_r+0x4e>
 80053f4:	6811      	ldr	r1, [r2, #0]
 80053f6:	1855      	adds	r5, r2, r1
 80053f8:	42a5      	cmp	r5, r4
 80053fa:	d10b      	bne.n	8005414 <_free_r+0x78>
 80053fc:	6824      	ldr	r4, [r4, #0]
 80053fe:	4421      	add	r1, r4
 8005400:	1854      	adds	r4, r2, r1
 8005402:	42a3      	cmp	r3, r4
 8005404:	6011      	str	r1, [r2, #0]
 8005406:	d1dd      	bne.n	80053c4 <_free_r+0x28>
 8005408:	681c      	ldr	r4, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	6053      	str	r3, [r2, #4]
 800540e:	4421      	add	r1, r4
 8005410:	6011      	str	r1, [r2, #0]
 8005412:	e7d7      	b.n	80053c4 <_free_r+0x28>
 8005414:	d902      	bls.n	800541c <_free_r+0x80>
 8005416:	230c      	movs	r3, #12
 8005418:	6003      	str	r3, [r0, #0]
 800541a:	e7d3      	b.n	80053c4 <_free_r+0x28>
 800541c:	6825      	ldr	r5, [r4, #0]
 800541e:	1961      	adds	r1, r4, r5
 8005420:	428b      	cmp	r3, r1
 8005422:	bf04      	itt	eq
 8005424:	6819      	ldreq	r1, [r3, #0]
 8005426:	685b      	ldreq	r3, [r3, #4]
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	bf04      	itt	eq
 800542c:	1949      	addeq	r1, r1, r5
 800542e:	6021      	streq	r1, [r4, #0]
 8005430:	6054      	str	r4, [r2, #4]
 8005432:	e7c7      	b.n	80053c4 <_free_r+0x28>
 8005434:	b003      	add	sp, #12
 8005436:	bd30      	pop	{r4, r5, pc}
 8005438:	20009cd8 	.word	0x20009cd8

0800543c <_malloc_r>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	1ccd      	adds	r5, r1, #3
 8005440:	f025 0503 	bic.w	r5, r5, #3
 8005444:	3508      	adds	r5, #8
 8005446:	2d0c      	cmp	r5, #12
 8005448:	bf38      	it	cc
 800544a:	250c      	movcc	r5, #12
 800544c:	2d00      	cmp	r5, #0
 800544e:	4606      	mov	r6, r0
 8005450:	db01      	blt.n	8005456 <_malloc_r+0x1a>
 8005452:	42a9      	cmp	r1, r5
 8005454:	d903      	bls.n	800545e <_malloc_r+0x22>
 8005456:	230c      	movs	r3, #12
 8005458:	6033      	str	r3, [r6, #0]
 800545a:	2000      	movs	r0, #0
 800545c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800545e:	f000 f8f1 	bl	8005644 <__malloc_lock>
 8005462:	4921      	ldr	r1, [pc, #132]	; (80054e8 <_malloc_r+0xac>)
 8005464:	680a      	ldr	r2, [r1, #0]
 8005466:	4614      	mov	r4, r2
 8005468:	b99c      	cbnz	r4, 8005492 <_malloc_r+0x56>
 800546a:	4f20      	ldr	r7, [pc, #128]	; (80054ec <_malloc_r+0xb0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	b923      	cbnz	r3, 800547a <_malloc_r+0x3e>
 8005470:	4621      	mov	r1, r4
 8005472:	4630      	mov	r0, r6
 8005474:	f000 f83c 	bl	80054f0 <_sbrk_r>
 8005478:	6038      	str	r0, [r7, #0]
 800547a:	4629      	mov	r1, r5
 800547c:	4630      	mov	r0, r6
 800547e:	f000 f837 	bl	80054f0 <_sbrk_r>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	d123      	bne.n	80054ce <_malloc_r+0x92>
 8005486:	230c      	movs	r3, #12
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	4630      	mov	r0, r6
 800548c:	f000 f8e0 	bl	8005650 <__malloc_unlock>
 8005490:	e7e3      	b.n	800545a <_malloc_r+0x1e>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	1b5b      	subs	r3, r3, r5
 8005496:	d417      	bmi.n	80054c8 <_malloc_r+0x8c>
 8005498:	2b0b      	cmp	r3, #11
 800549a:	d903      	bls.n	80054a4 <_malloc_r+0x68>
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	441c      	add	r4, r3
 80054a0:	6025      	str	r5, [r4, #0]
 80054a2:	e004      	b.n	80054ae <_malloc_r+0x72>
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	42a2      	cmp	r2, r4
 80054a8:	bf0c      	ite	eq
 80054aa:	600b      	streq	r3, [r1, #0]
 80054ac:	6053      	strne	r3, [r2, #4]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f8ce 	bl	8005650 <__malloc_unlock>
 80054b4:	f104 000b 	add.w	r0, r4, #11
 80054b8:	1d23      	adds	r3, r4, #4
 80054ba:	f020 0007 	bic.w	r0, r0, #7
 80054be:	1ac2      	subs	r2, r0, r3
 80054c0:	d0cc      	beq.n	800545c <_malloc_r+0x20>
 80054c2:	1a1b      	subs	r3, r3, r0
 80054c4:	50a3      	str	r3, [r4, r2]
 80054c6:	e7c9      	b.n	800545c <_malloc_r+0x20>
 80054c8:	4622      	mov	r2, r4
 80054ca:	6864      	ldr	r4, [r4, #4]
 80054cc:	e7cc      	b.n	8005468 <_malloc_r+0x2c>
 80054ce:	1cc4      	adds	r4, r0, #3
 80054d0:	f024 0403 	bic.w	r4, r4, #3
 80054d4:	42a0      	cmp	r0, r4
 80054d6:	d0e3      	beq.n	80054a0 <_malloc_r+0x64>
 80054d8:	1a21      	subs	r1, r4, r0
 80054da:	4630      	mov	r0, r6
 80054dc:	f000 f808 	bl	80054f0 <_sbrk_r>
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1dd      	bne.n	80054a0 <_malloc_r+0x64>
 80054e4:	e7cf      	b.n	8005486 <_malloc_r+0x4a>
 80054e6:	bf00      	nop
 80054e8:	20009cd8 	.word	0x20009cd8
 80054ec:	20009cdc 	.word	0x20009cdc

080054f0 <_sbrk_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	4d06      	ldr	r5, [pc, #24]	; (800550c <_sbrk_r+0x1c>)
 80054f4:	2300      	movs	r3, #0
 80054f6:	4604      	mov	r4, r0
 80054f8:	4608      	mov	r0, r1
 80054fa:	602b      	str	r3, [r5, #0]
 80054fc:	f7fb ff76 	bl	80013ec <_sbrk>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d102      	bne.n	800550a <_sbrk_r+0x1a>
 8005504:	682b      	ldr	r3, [r5, #0]
 8005506:	b103      	cbz	r3, 800550a <_sbrk_r+0x1a>
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	bd38      	pop	{r3, r4, r5, pc}
 800550c:	2000a36c 	.word	0x2000a36c

08005510 <__sread>:
 8005510:	b510      	push	{r4, lr}
 8005512:	460c      	mov	r4, r1
 8005514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005518:	f000 f8a0 	bl	800565c <_read_r>
 800551c:	2800      	cmp	r0, #0
 800551e:	bfab      	itete	ge
 8005520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005522:	89a3      	ldrhlt	r3, [r4, #12]
 8005524:	181b      	addge	r3, r3, r0
 8005526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800552a:	bfac      	ite	ge
 800552c:	6563      	strge	r3, [r4, #84]	; 0x54
 800552e:	81a3      	strhlt	r3, [r4, #12]
 8005530:	bd10      	pop	{r4, pc}

08005532 <__swrite>:
 8005532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005536:	461f      	mov	r7, r3
 8005538:	898b      	ldrh	r3, [r1, #12]
 800553a:	05db      	lsls	r3, r3, #23
 800553c:	4605      	mov	r5, r0
 800553e:	460c      	mov	r4, r1
 8005540:	4616      	mov	r6, r2
 8005542:	d505      	bpl.n	8005550 <__swrite+0x1e>
 8005544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005548:	2302      	movs	r3, #2
 800554a:	2200      	movs	r2, #0
 800554c:	f000 f868 	bl	8005620 <_lseek_r>
 8005550:	89a3      	ldrh	r3, [r4, #12]
 8005552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	4632      	mov	r2, r6
 800555e:	463b      	mov	r3, r7
 8005560:	4628      	mov	r0, r5
 8005562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005566:	f000 b817 	b.w	8005598 <_write_r>

0800556a <__sseek>:
 800556a:	b510      	push	{r4, lr}
 800556c:	460c      	mov	r4, r1
 800556e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005572:	f000 f855 	bl	8005620 <_lseek_r>
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	bf15      	itete	ne
 800557c:	6560      	strne	r0, [r4, #84]	; 0x54
 800557e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005586:	81a3      	strheq	r3, [r4, #12]
 8005588:	bf18      	it	ne
 800558a:	81a3      	strhne	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__sclose>:
 800558e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005592:	f000 b813 	b.w	80055bc <_close_r>
	...

08005598 <_write_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d07      	ldr	r5, [pc, #28]	; (80055b8 <_write_r+0x20>)
 800559c:	4604      	mov	r4, r0
 800559e:	4608      	mov	r0, r1
 80055a0:	4611      	mov	r1, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f7fb f836 	bl	8000618 <_write>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_write_r+0x1e>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_write_r+0x1e>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	2000a36c 	.word	0x2000a36c

080055bc <_close_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d06      	ldr	r5, [pc, #24]	; (80055d8 <_close_r+0x1c>)
 80055c0:	2300      	movs	r3, #0
 80055c2:	4604      	mov	r4, r0
 80055c4:	4608      	mov	r0, r1
 80055c6:	602b      	str	r3, [r5, #0]
 80055c8:	f7fb fedb 	bl	8001382 <_close>
 80055cc:	1c43      	adds	r3, r0, #1
 80055ce:	d102      	bne.n	80055d6 <_close_r+0x1a>
 80055d0:	682b      	ldr	r3, [r5, #0]
 80055d2:	b103      	cbz	r3, 80055d6 <_close_r+0x1a>
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	2000a36c 	.word	0x2000a36c

080055dc <_fstat_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d07      	ldr	r5, [pc, #28]	; (80055fc <_fstat_r+0x20>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	f7fb fed6 	bl	800139a <_fstat>
 80055ee:	1c43      	adds	r3, r0, #1
 80055f0:	d102      	bne.n	80055f8 <_fstat_r+0x1c>
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	b103      	cbz	r3, 80055f8 <_fstat_r+0x1c>
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	bd38      	pop	{r3, r4, r5, pc}
 80055fa:	bf00      	nop
 80055fc:	2000a36c 	.word	0x2000a36c

08005600 <_isatty_r>:
 8005600:	b538      	push	{r3, r4, r5, lr}
 8005602:	4d06      	ldr	r5, [pc, #24]	; (800561c <_isatty_r+0x1c>)
 8005604:	2300      	movs	r3, #0
 8005606:	4604      	mov	r4, r0
 8005608:	4608      	mov	r0, r1
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	f7fb fed5 	bl	80013ba <_isatty>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_isatty_r+0x1a>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_isatty_r+0x1a>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	2000a36c 	.word	0x2000a36c

08005620 <_lseek_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4d07      	ldr	r5, [pc, #28]	; (8005640 <_lseek_r+0x20>)
 8005624:	4604      	mov	r4, r0
 8005626:	4608      	mov	r0, r1
 8005628:	4611      	mov	r1, r2
 800562a:	2200      	movs	r2, #0
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fb fece 	bl	80013d0 <_lseek>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_lseek_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_lseek_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	2000a36c 	.word	0x2000a36c

08005644 <__malloc_lock>:
 8005644:	4801      	ldr	r0, [pc, #4]	; (800564c <__malloc_lock+0x8>)
 8005646:	f7ff be43 	b.w	80052d0 <__retarget_lock_acquire_recursive>
 800564a:	bf00      	nop
 800564c:	2000a364 	.word	0x2000a364

08005650 <__malloc_unlock>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__malloc_unlock+0x8>)
 8005652:	f7ff be3e 	b.w	80052d2 <__retarget_lock_release_recursive>
 8005656:	bf00      	nop
 8005658:	2000a364 	.word	0x2000a364

0800565c <_read_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d07      	ldr	r5, [pc, #28]	; (800567c <_read_r+0x20>)
 8005660:	4604      	mov	r4, r0
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
 8005666:	2200      	movs	r2, #0
 8005668:	602a      	str	r2, [r5, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	f7fb fe6c 	bl	8001348 <_read>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d102      	bne.n	800567a <_read_r+0x1e>
 8005674:	682b      	ldr	r3, [r5, #0]
 8005676:	b103      	cbz	r3, 800567a <_read_r+0x1e>
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	bd38      	pop	{r3, r4, r5, pc}
 800567c:	2000a36c 	.word	0x2000a36c

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
